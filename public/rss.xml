<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Chris Krycho</title>
        <link>v4.chriskrycho.com</link>
        <description>Seeking truth &amp; pursuing excellence.</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="v4.chriskrycho.com/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Tue, 25 Jun 2019 20:15:00 -0600</lastBuildDate>
        
            <item>
                <title>All Things Open 2019!</title>
                <pubDate>Tue, 25 Jun 2019 20:15:00 -0600</pubDate>
                <link>v4.chriskrycho.com/ato-2019/</link>
                <guid>v4.chriskrycho.com/ato-2019/</guid>
                <description>&lt;p&gt;I’m very excited to announce that &lt;a href=&quot;https:&#x2F;&#x2F;allthingsopen.org&#x2F;speakers&#x2F;chris-krycho&#x2F;&quot;&gt;I’ve been accepted&lt;&#x2F;a&gt; to give a talk at this year’s &lt;a href=&quot;https:&#x2F;&#x2F;allthingsopen.org&quot;&gt;All Things Open&lt;&#x2F;a&gt; in Raleigh, North Carolina, October 13–15. Here’s the pitch for the talk, titled “Don’t Go Bankrupt! Managing Technical Costs”:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every engineering organization—whether in a startup, a Fortune 500 company, or an open source project—must both &lt;em&gt;sustain&lt;&#x2F;em&gt; (keep the lights on!) and &lt;em&gt;innovate&lt;&#x2F;em&gt; (deliver new functionality!). Simultaneously sustaining and innovating requires carefully managing technical costs: debt, maintenance, and investments.&lt;&#x2F;p&gt;
&lt;p&gt;But managing those technical costs requires &lt;em&gt;understanding&lt;&#x2F;em&gt; them—and most of us don’t. Not everything is “tech debt”! Lumping all our costs into that one moniker misleads us as engineers and fails us in communicating to our users, whether those users are colleagues, customers, or the open source community.&lt;&#x2F;p&gt;
&lt;p&gt;Too often, that confusion ultimately leads us right into technical bankruptcy. But we can do better!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I gave a shorter, less polished version of this as an internal “tech talk” at Olo back in November 2018. My colleagues’ reception was remarkably positive. (If it gets &lt;em&gt;half&lt;&#x2F;em&gt; so enthusiastic a reception at All Things Open, I’ll be &lt;em&gt;thrilled&lt;&#x2F;em&gt;.) Not just engineers, either! Members of Olo’s product, sales, client success, and executive teams all said they found the material helpful and clarifying. If you’re in a technical business, I trust you may find it helpful as well.&lt;&#x2F;p&gt;
&lt;p&gt;If you end up at All Things Open yourself—it looks to be a great conference quite independent of my being there!—please &lt;a href=&quot;mailto:hello@chriskrycho.com&quot; title=&quot;All Things Open 2019&quot;&gt;send me a note&lt;&#x2F;a&gt;—I’d love to meet up and chat.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>What even is a potato, am I right?</title>
                <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
                <link>v4.chriskrycho.com/2018/potato/</link>
                <guid>v4.chriskrycho.com/2018/potato/</guid>
                <description>&lt;p&gt;Potatos are yummy.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>True Myth 2.2</title>
                <pubDate>Sat, 27 Oct 2018 17:00:00 -0700</pubDate>
                <link>v4.chriskrycho.com/true-myth-22/</link>
                <guid>v4.chriskrycho.com/true-myth-22/</guid>
                <description>&lt;p&gt;I just released v2.2&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; of True Myth, with two new pairs of helpers to deal with &lt;a href=&quot;v4.chriskrycho.com&#x2F;true-myth-22&#x2F;#safe-java-script-object-property-lookup&quot;&gt;safe JavaScript object property lookup with &lt;code&gt;Maybe&lt;&#x2F;code&gt;s&lt;&#x2F;a&gt; and &lt;a href=&quot;v4.chriskrycho.com&#x2F;true-myth-22&#x2F;#handling-exception-throwing-functions&quot;&gt;handling exception-throwing code with &lt;code&gt;Result&lt;&#x2F;code&gt;s&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;safe-javascript-object-property-lookup&quot;&gt;Safe JavaScript object property lookup&lt;&#x2F;h2&gt;
&lt;p&gt;We often deal with &lt;em&gt;optional properties&lt;&#x2F;em&gt; on JavaScript objects, and by default JavaScript just gives us &lt;code&gt;undefined&lt;&#x2F;code&gt; if a property doesn&#x27;t exist on an object and we look it up:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;type Person = {
  name?: string;
};

let me: Person = { name: &#x27;Chris&#x27; };
console.log(me.name); &#x2F;&#x2F; Chris

let anonymous: Person = {};
console.log(anonymous.name); &#x2F;&#x2F; undefined
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can already work around that with &lt;code&gt;Maybe.of&lt;&#x2F;code&gt;, of course:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;function printName(p: Person) {
  let name = Maybe.of(p.name);
  console.log(name.unwrapOr(&#x27;&amp;lt;anonymous&amp;gt;&#x27;));
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But this is a &lt;em&gt;really&lt;&#x2F;em&gt; common pattern! &lt;code&gt;Maybe.property&lt;&#x2F;code&gt; is a convenience method for dealing with this:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;function printName(p: Person) {
  let name = Maybe.property(&#x27;name&#x27;, p);
  console.log(name.unwrapOr(&#x27;&amp;lt;anonymous&amp;gt;&#x27;));
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At first blush, this might be a head-scratcher: after all, it&#x27;s actually slightly &lt;em&gt;longer&lt;&#x2F;em&gt; than doing it with &lt;code&gt;Maybe.of&lt;&#x2F;code&gt;. However, it ends up showing its convenience when you&#x27;re using the curried form in a functional pipeline. For example, if we had a &lt;em&gt;list&lt;&#x2F;em&gt; of people, and wanted to get a list of just the people&#x27;s names (ignoring anonymous people), we might do this:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;function justNames(people: Person[]): string[] {
  return people
    .map(Maybe.property(&#x27;name&#x27;))
    .filter(Maybe.isJust)
    .map(Just.unwrap);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another common scenario is dealing with the same kind of lookup, but in the context of a &lt;code&gt;Maybe&lt;&#x2F;code&gt; of an object. Prior to 2.2.0, we could do this with a combination of &lt;code&gt;Maybe.of&lt;&#x2F;code&gt; and &lt;code&gt;andThen&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;function getName(maybePerson: Maybe&amp;lt;Person&amp;gt;): string {
  return maybePerson.andThen(p =&amp;gt; Maybe.of(p.name));
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is harder to compose than we might like, and we &lt;em&gt;can&#x27;t&lt;&#x2F;em&gt; really write it in a &amp;quot;point free&amp;quot; style, even if that&#x27;s more convenient. We also end up repeating the &lt;code&gt;andThen&lt;&#x2F;code&gt; invocation every time we go down a layer if we have a more deeply nested object than this. Accordingly, 2.2.0 also adds another convenience method for dealing with deeply nested lookups on objects in a type-safe way: &lt;code&gt;Maybe.get&lt;&#x2F;code&gt; (and the corresponding instance methods).&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&#x2F;&#x2F; Function version:
function getNameFn(maybePerson: Maybe&amp;lt;Person&amp;gt;): string {
  return Maybe.get(&#x27;name&#x27;, maybePerson);
}

&#x2F;&#x2F; Method version
function getNameM(maybePerson: Maybe&amp;lt;Person&amp;gt;): string {
  return maybePerson.get(&#x27;name&#x27;);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, since the function version is curried, we can use this to create other little helper functions along the way:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;const getName = Maybe.get(&#x27;name&#x27;);

function getAllNames(people: Maybe&amp;lt;Person&amp;gt;[]): string[] {
  return people
    .map(getName)
    .filter(Maybe.isJust)
    .map(Just.unwrap);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And if our object is a deeper type:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;type ComplicatedPerson = {
  name?: {
    first?: string;
    last?: string;
  };
};

let none: Maybe&amp;lt;ComplicatedPerson&amp;gt; = Maybe.nothing();
console.log(none.get(&#x27;name&#x27;).toString());
&#x2F;&#x2F; Nothing
console.log(none.get(&#x27;name&#x27;).get(&#x27;first&#x27;).toString());
&#x2F;&#x2F; Nothing

let nameless: Maybe&amp;lt;ComplicatedPerson&amp;gt; = Maybe.just({});
console.log(nameless.get(&#x27;name&#x27;).toString());
&#x2F;&#x2F; Just([object Object]);
console.log(nameless.get(&#x27;name&#x27;).get(&#x27;first&#x27;).toString());
&#x2F;&#x2F; Nothing

let firstOnly: Maybe&amp;lt;ComplicatedPerson&amp;gt; = Maybe.just({
  name: {
    first: &#x27;Chris&#x27;,
  },
});
console.log(firstOnly.get(&#x27;name&#x27;).toString());
&#x2F;&#x2F; Just([object Object]);
console.log(firstOnly.get(&#x27;name&#x27;).get(&#x27;first&#x27;).toString());
&#x2F;&#x2F; Just(Chris);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that in these cases, since the type we&#x27;re dealing with is some kind of object with specific keys, if you try to pass in a key which doesn&#x27;t existing on the relevant object type, you&#x27;ll get a type error. (Or, if you&#x27;re using the curried version, if you try to pass an object which doesn&#x27;t have that key, you&#x27;ll get a type error.) However, we also often use JavaScript objects as &lt;em&gt;dictionaries&lt;&#x2F;em&gt;, mapping from a key to a value (most often, but not always, a &lt;em&gt;string&lt;&#x2F;em&gt; key to a specific value type). &lt;code&gt;Maybe.property&lt;&#x2F;code&gt; and &lt;code&gt;Maybe.get&lt;&#x2F;code&gt; both work with dictionary types as well.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;type Dict&amp;lt;T&amp;gt; = { [key: string]: T };

let ages: Dict&amp;lt;number&amp;gt; = {
  &#x27;chris&#x27;: 31,
};

console.log(Maybe.property(&#x27;chris&#x27;, ages)); &#x2F;&#x2F; Just(31)
console.log(Maybe.property(&#x27;joe&#x27;, ages)); &#x2F;&#x2F; Nothing

let maybeAges: Maybe&amp;lt;Dict&amp;lt;number&amp;gt;&amp;gt; = Maybe.of(ages);
console.log(ages.get(&#x27;chris&#x27;)); &#x2F;&#x2F; Just(31)
console.log(ages.get(&#x27;joe&#x27;)); &#x2F;&#x2F; Nothing
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hopefully you&#x27;ll find these helpful! I ran into the motivating concerns for them pretty regularly in the codebase I work with each day, so I&#x27;m looking forward to integrating them into that app!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;handling-exception-throwing-functions&quot;&gt;Handling exception-throwing functions&lt;&#x2F;h2&gt;
&lt;p&gt;The other big additions are the &lt;code&gt;Result.tryOr&lt;&#x2F;code&gt; and &lt;code&gt;Result.tryOrElse&lt;&#x2F;code&gt; functions. Both of these help us deal with functions which throw exceptions. Since JavaScript doesn&#x27;t have any &lt;em&gt;native&lt;&#x2F;em&gt; construct like &lt;code&gt;Result&lt;&#x2F;code&gt;, idiomatic JavaScript &lt;em&gt;does&lt;&#x2F;em&gt; often throw exceptions. And that can be frustrating you want to have a value type like a &lt;code&gt;Result&lt;&#x2F;code&gt; to deal with instead.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes, you don&#x27;t care &lt;em&gt;what&lt;&#x2F;em&gt; the exception was; you just want a default value (or a value constructed from the local state of your program, but either way just one value) you can use as the error to keep moving along through your program. In that case, you wrap a function which throws an error in &lt;code&gt;Result.tryOr&lt;&#x2F;code&gt;. Let&#x27;s assume we have a function either returns a number of throws an error, which we&#x27;ll just call &lt;code&gt;badFunction&lt;&#x2F;code&gt; because the details here don&#x27;t really matter.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;const err = &#x27;whoops! something went wrong!&#x27;;
const result = Result.tryOr(err, badFunction());
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;result&lt;&#x2F;code&gt; value has the type &lt;code&gt;Result&amp;lt;number, string&amp;gt;&lt;&#x2F;code&gt;. If &lt;code&gt;badFunction&lt;&#x2F;code&gt; through an error, we have an &lt;code&gt;Err&lt;&#x2F;code&gt; with the value &lt;code&gt;&#x27;whoops! something went wrong!&#x27;&lt;&#x2F;code&gt; in it. If it &lt;em&gt;didn&#x27;t&lt;&#x2F;em&gt; throw an error, we have an &lt;code&gt;Ok&lt;&#x2F;code&gt; with the number returned from &lt;code&gt;badFunction&lt;&#x2F;code&gt; in it. Handy!&lt;&#x2F;p&gt;
&lt;p&gt;Of course, we often want to &lt;em&gt;do something&lt;&#x2F;em&gt; with the exception that gets thrown. For example, we might want to log an error to a bug-tracking service, or display a nice message to the user, or any number of other things. In that case, we can use the &lt;code&gt;Result.tryOrElse&lt;&#x2F;code&gt; function. Let&#x27;s imagine we have a function &lt;code&gt;throwsHelpfulErrors&lt;&#x2F;code&gt; which returns a &lt;code&gt;number&lt;&#x2F;code&gt; or does just what it says on the tin: it throws a bunch of different kinds of errors, which are helpfully distinct and carry around useful information with them. Note that the type of the error-handling callback we pass in is &lt;code&gt;(error: unknown) =&amp;gt; E&lt;&#x2F;code&gt;, because JS functions can throw &lt;em&gt;anything&lt;&#x2F;em&gt; as their error.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;const handleErr = (e: unknown): string =&amp;gt; {
  if (e instanceof Error) {
    return e.message;
  } else if (typeof e === &#x27;string&#x27;) {
    return e;
  } else if (typeof e === &#x27;number&#x27;) {
    return &#96;Status code: ${e}&#96;;
  } else {
    return &#x27;Unknown error&#x27;;
  }
}

const result = Result.tryOrElse(handleErr, throwsHelpfulErrors);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code&gt;result&lt;&#x2F;code&gt; is once again a &lt;code&gt;Result&amp;lt;number, string&amp;gt;&lt;&#x2F;code&gt;, but the error side has whatever explanatory information the exception provided to us, plus some massaging we did ourselves. This is particularly handy for converting exceptions to &lt;code&gt;Result&lt;&#x2F;code&gt;s when you have a library which uses exceptions extensively, but in a carefully structured way. (You could, in fact, just use an identity function to return whatever error the library throws—as long as you write your types carefully and accurately as a union of those error types for the &lt;code&gt;E&lt;&#x2F;code&gt; type parameter! However, doing that would require you to explicitly opt into the use of &lt;code&gt;any&lt;&#x2F;code&gt; to write it as a simple identity function, so I&#x27;m not sure I&#x27;d &lt;em&gt;recommend&lt;&#x2F;em&gt; it. If you go down that path, do it with care.)&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;And that&#x27;s it for True Myth 2.2! Enjoy, and of course please &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;true-myth&#x2F;true-myth&#x2F;issues&quot;&gt;open an issue&lt;&#x2F;a&gt; if you run into any bugs!&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bmakuh&quot;&gt;Ben Makuh&lt;&#x2F;a&gt; for implementing &lt;code&gt;Result.tryOr&lt;&#x2F;code&gt; and &lt;code&gt;Result.tryOrElse&lt;&#x2F;code&gt;. Thanks to Ben and also &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tansongyang&quot;&gt;Frank Tan&lt;&#x2F;a&gt; for helpful input on the &lt;code&gt;Maybe.get&lt;&#x2F;code&gt; and &lt;code&gt;Maybe.property&lt;&#x2F;code&gt; &lt;abbr&gt;API&lt;&#x2F;abbr&gt; design!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;I published both &lt;code&gt;2.2.0&lt;&#x2F;code&gt; and &lt;code&gt;2.2.1&lt;&#x2F;code&gt;, because once again I missed something along the way. This time it was making sure all the new functions were optionally curried to support partial application.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</description>
            </item>
        
            <item>
                <title>Blog as Note-Taking Tool</title>
                <pubDate>Mon, 16 Jul 2018 07:00:00 -0700</pubDate>
                <link>v4.chriskrycho.com/blog-as-note-taking-tool/</link>
                <guid>v4.chriskrycho.com/blog-as-note-taking-tool/</guid>
                <description>&lt;p&gt;I have a habit that might not make sense to you. I reread my own blog posts fairly regularly. It’s not vanity—not some weird obsession with my own awesomeness in the form of my own writing or some such nonsense. It’s that in my blog posts over the last decade, I have a pretty serious backlog of &lt;em&gt;what I was thinking about at any given point in time.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It’s not exhaustive, by a long shot. It only includes things I actually decided to publish.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; There are, sadly, not many short thoughts in the mix. Nor is it well-tagged or organized in any internally-consistent way—even in any single version of the site, much less across versions. But nonetheless the history is still there, and I &lt;em&gt;can&lt;&#x2F;em&gt; traverse the various lines through it, such as they are. (Sometimes, even, the changes in organization and structure are illuminating about how I was thinking about things at the time!) In any case, my habit of linking to previous references to ideas has proven invaluable for the times when I want to trawl back through old posts and consider those old thoughts again.&lt;&#x2F;p&gt;
&lt;p&gt;Reading old blog posts is a strange experience, of course. The person who wrote these things was recognizably myself; but I am not who I then I was, and I sometimes disagree with myself on the substance and often on the style. (I occasionally find an old gem and wonder how I ever managed to write so well.) That very strangeness, it turns out, is why I do this every so often, though. Thinking well is often a matter of forging connections between ideas that were previously not connected for us. We cannot consciously hold in our minds even a fraction of all the things we have thought about or even written something about over the years. We can, however, jog our memories, and let new connections form. And rereading one’s own blog post is a great way to do that.&lt;&#x2F;p&gt;
&lt;p&gt;I’d not heard specifically of the &lt;a href=&quot;https:&#x2F;&#x2F;zettelkasten.de&quot;&gt;Zettelkasten method&lt;&#x2F;a&gt; until Alan Jacobs linked it a while back, but it fits this model pretty perfectly, and maps as well to ways I’ve been &lt;em&gt;trying&lt;&#x2F;em&gt; to structure my note-taking and thinking for the past few years. (I’m going to be consciously doing more of this in &lt;a href=&quot;http:&#x2F;&#x2F;www.bear-writer.com&quot;&gt;Bear&lt;&#x2F;a&gt;, my current notes app of choice. I’ll probably write up my experience that way once I’ve actually had some experience!) But this also ties into some of the things Jacobs has been &lt;a href=&quot;https:&#x2F;&#x2F;blog.ayjay.org&#x2F;the-blog-garden&#x2F;&quot; title=&quot;The Blog Garden&quot;&gt;musing out loud&lt;&#x2F;a&gt; about in his own blog over the last week. It’s not just that a blog can serve as a place to do some of the fleshing-out of ideas. It’s not just that a blog can be a record of the development of ideas. It can also serve to jog new ideas if you read yourself again, displaced (both literally and temporally) from the original writing of the thing. A blog is kind of like a public notebook, and while it &lt;em&gt;may&lt;&#x2F;em&gt; be useful for others to browse through it, is &lt;em&gt;is&lt;&#x2F;em&gt; useful for me to browse back through it.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;&lt;pre&gt;&lt;code&gt;Though: if you look at the archives, especially including those on my [first real blog](http:&#x2F;&#x2F;blog.chriskrycho.com &amp;quot;Thoughts; A Flame&amp;quot;) and [the previous iteration of this site](http:&#x2F;&#x2F;2012-2013.chriskrycho.com), you’ll notice that I published a lot of posts about a lot of subjects, whether my thoughts were especially well-formed or not.
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
</description>
            </item>
        
            <item>
                <title>A Meander</title>
                <pubDate>Fri, 09 Feb 2018 07:00:00 -0700</pubDate>
                <link>v4.chriskrycho.com/a-meander/</link>
                <guid>v4.chriskrycho.com/a-meander/</guid>
                <description>&lt;p&gt;This is a meander. I have a bunch of mostly-unformed thoughts, and I want to write, and the two come out here, together, in the next few minutes before I start my workday proper (because I stayed up late last night working on open source software and got up late accordingly, and so have a great deal less of &lt;a href=&quot;http:&#x2F;&#x2F;www.chriskrycho.com&#x2F;2017&#x2F;knowing-your-rhythms.html&quot; title=&quot;“Knowing Your Rhythms”&quot;&gt;my normally-allocated writing time&lt;&#x2F;a&gt; available today).&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;1&quot;&gt;1.&lt;&#x2F;h2&gt;
&lt;p&gt;Open-source software is a very strange place, and the dynamics of it favor those of us who already have well-paying jobs and lots of flexibility in our schedule.&lt;&#x2F;p&gt;
&lt;p&gt;This isn’t &lt;em&gt;necessarily&lt;&#x2F;em&gt; a bad thing. It means that anyone who wants to use open-source contribution as a gauge of someone’s fitness to work is making a pretty foolish decision, though: they’re inherently cutting off a whole sector---dare I say it, a whole &lt;em&gt;class&lt;&#x2F;em&gt;---of people who simply do not (and, barring being given a pretty surprising break, will never) have that kind of stability and flexibility.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2&quot;&gt;2.&lt;&#x2F;h2&gt;
&lt;p&gt;Twitter is really, &lt;em&gt;really&lt;&#x2F;em&gt; bad for meaningful discussion. I follow both &lt;a href=&quot;https:&#x2F;&#x2F;mobile.twitter.com&#x2F;noahpinion&quot;&gt;Noah Smith (@noahpinion)&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;mobile.twitter.com&#x2F;lymanstoneky&quot;&gt;Lyman Stone (@lymanstoneky)&lt;&#x2F;a&gt;, and they’re both extremely interesting follows, and they’re both clearly &lt;em&gt;really&lt;&#x2F;em&gt; smart and &lt;em&gt;really&lt;&#x2F;em&gt; well-informed, and in their off-Twitter writing they both do a good job of fairly representing others’ views and interacting with them.&lt;&#x2F;p&gt;
&lt;p&gt;On Twitter, their arguments are a disaster.&lt;&#x2F;p&gt;
&lt;p&gt;This is not specific to Smith and Stone. This is Twitter in one pair of interlocutors.&lt;&#x2F;p&gt;
&lt;p&gt;Seriously: stop tweeting and start blogging again, if you have an &lt;em&gt;argument&lt;&#x2F;em&gt; to make rather than just a pithy, one-off observation or a link to share.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3&quot;&gt;3.&lt;&#x2F;h2&gt;
&lt;p&gt;You can get a surprising amount of writing done in 5 minutes, if you’re willing to just word-vomit. (This whole post, start to finish, took me 12 minutes.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4&quot;&gt;4.&lt;&#x2F;h2&gt;
&lt;p&gt;I need to read more poetry; more rich, good fiction; more rich, good nonfiction. I’ve read a lot of nonfiction in the last five years, but I wouldn’t call most of it &lt;em&gt;rich&lt;&#x2F;em&gt;. Most of it---most of my seminary reading, that is---was &lt;em&gt;just okay&lt;&#x2F;em&gt;; very little of it engaged deeply with thought critical of its own perspective. (Major exceptions: David Koyzis’ really excellent &lt;em&gt;Political Visions and Illusions&lt;&#x2F;em&gt;, Alvin Plantinga’s &lt;em&gt;Where the Conflict Really Lies&lt;&#x2F;em&gt;, and of course St. Athanasius’ &lt;em&gt;On the Incarnation&lt;&#x2F;em&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;But I find that my own writing is far sharper, clearer, and better when I’m drawing &lt;em&gt;widely&lt;&#x2F;em&gt; and from &lt;em&gt;deep wells&lt;&#x2F;em&gt;. Widely, because I find that too much time in the same spot overly narrows my focus, whether that is apologetics or programming languages. From deep wells because, frankly, there is too much out there which warrants nothing more than a skim &lt;em&gt;at most&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;And that is all!&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title></title>
                <pubDate>Sat, 08 Jul 2017 21:45:00 -0700</pubDate>
                <link>v4.chriskrycho.com/book-list/</link>
                <guid>v4.chriskrycho.com/book-list/</guid>
                <description>&lt;p&gt;I&#x27;ve just posted my in-progress &lt;a href=&quot;http:&#x2F;&#x2F;www.chriskrycho.com&#x2F;2017-book-list.html&quot;&gt;2017 Book List&lt;&#x2F;a&gt;. I&#x27;ll update it with books as I finish them, and I&#x27;ll also update it with reviews (even of the &amp;quot;here&#x27;s a brief comment&amp;quot; variety) as I do them. This is something I&#x27;ve been thinking about doing for my own sake for a while, and bumping into &lt;a href=&quot;http:&#x2F;&#x2F;tbrown.org&#x2F;notes&#x2F;2017&#x2F;06&#x2F;23&#x2F;reading-and-sharing&#x2F;&quot;&gt;this post by Tim Brown&lt;&#x2F;a&gt; reminded me how much I want to be sharing what I read with other people.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes I get myself spun up on thinking that I need to be reviewing books with the best of them. In reality, I really just want to do like Tim says in that post (emphasis his):&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When I am reading and sharing ideas about what I have read, I feel like my best self. &lt;em&gt;I want more of that feeling.&lt;&#x2F;em&gt;... I’m wondering if acknowledging what I read, along with a substantial visual (a book cover image?) and any highlights or notes, could feel just as good as having a physical book.... Maybe I could list my piles of books here on my website, and link them to blog post entries with highlights&#x2F;notes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;That&#x27;s it exactly. So I&#x27;m going ahead and doing the work: I&#x27;m going to keep that list up to date, and I&#x27;m going to try to write and share &lt;em&gt;something&lt;&#x2F;em&gt; about every book I read for the rest of the year. It doesn&#x27;t have to be a lot---just a sentence or two will do in many cases. &amp;quot;I liked it&amp;quot; or &amp;quot;This had a lot of potential but didn&#x27;t quite measure up to it.&amp;quot; Something simple like &lt;a href=&quot;https:&#x2F;&#x2F;wynnnetherland.com&#x2F;reviews&#x2F;to-hell-and-back-europe-1914-1949&#x2F;&quot;&gt;what Wynn Netherland does&lt;&#x2F;a&gt;, or something long and careful when it makes good sense.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe someday I&#x27;ll be able to write one of those killer reviews that ends up changing a whole conversation, or maybe I&#x27;ll just have a bunch of interesting notes I can look back on later and be able to see what I thought about a book when I&#x27;m curious a decade later. Either way, I think it&#x27;ll be a nice win.&lt;&#x2F;p&gt;
&lt;p&gt;So: &lt;a href=&quot;http:&#x2F;&#x2F;www.chriskrycho.com&#x2F;2017-book-list.html&quot;&gt;book list&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>YOLO is a thing people say</title>
                <pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate>
                <link>v4.chriskrycho.com/2017/yolo/</link>
                <guid>v4.chriskrycho.com/2017/yolo/</guid>
                <description>&lt;p&gt;But why they say it, I know not!&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>
