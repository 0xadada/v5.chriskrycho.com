<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Chris Krycho</title>
        <link>v4.chriskrycho.com</link>
        <description>Seeking truth &amp; pursuing excellence.</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="v4.chriskrycho.com/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Tue, 25 Jun 2019 20:15:00 -0600</lastBuildDate>
        
            <item>
                <title>All Things Open 2019!</title>
                <pubDate>Tue, 25 Jun 2019 20:15:00 -0600</pubDate>
                <link>v4.chriskrycho.com/ato-2019/</link>
                <guid>v4.chriskrycho.com/ato-2019/</guid>
                <description>&lt;p&gt;I’m very excited to announce that &lt;a href=&quot;https:&#x2F;&#x2F;allthingsopen.org&#x2F;speakers&#x2F;chris-krycho&#x2F;&quot;&gt;I’ve been accepted&lt;&#x2F;a&gt; to give a talk at this year’s &lt;a href=&quot;https:&#x2F;&#x2F;allthingsopen.org&quot;&gt;All Things Open&lt;&#x2F;a&gt; in Raleigh, North Carolina, October 13–15. Here’s the pitch for the talk, titled “Don’t Go Bankrupt! Managing Technical Costs”:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every engineering organization—whether in a startup, a Fortune 500 company, or an open source project—must both &lt;em&gt;sustain&lt;&#x2F;em&gt; (keep the lights on!) and &lt;em&gt;innovate&lt;&#x2F;em&gt; (deliver new functionality!). Simultaneously sustaining and innovating requires carefully managing technical costs: debt, maintenance, and investments.&lt;&#x2F;p&gt;
&lt;p&gt;But managing those technical costs requires &lt;em&gt;understanding&lt;&#x2F;em&gt; them—and most of us don’t. Not everything is “tech debt”! Lumping all our costs into that one moniker misleads us as engineers and fails us in communicating to our users, whether those users are colleagues, customers, or the open source community.&lt;&#x2F;p&gt;
&lt;p&gt;Too often, that confusion ultimately leads us right into technical bankruptcy. But we can do better!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I gave a shorter, less polished version of this as an internal “tech talk” at Olo back in November 2018. My colleagues’ reception was remarkably positive. (If it gets &lt;em&gt;half&lt;&#x2F;em&gt; so enthusiastic a reception at All Things Open, I’ll be &lt;em&gt;thrilled&lt;&#x2F;em&gt;.) Not just engineers, either! Members of Olo’s product, sales, client success, and executive teams all said they found the material helpful and clarifying. If you’re in a technical business, I trust you may find it helpful as well.&lt;&#x2F;p&gt;
&lt;p&gt;If you end up at All Things Open yourself—it looks to be a great conference quite independent of my being there!—please &lt;a href=&quot;mailto:hello@chriskrycho.com&quot; title=&quot;All Things Open 2019&quot;&gt;send me a note&lt;&#x2F;a&gt;—I’d love to meet up and chat.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Breaking Up With Social Media</title>
                <pubDate>Thu, 13 Jun 2019 15:15:00 -0600</pubDate>
                <link>v4.chriskrycho.com/breaking-up-with-social-media/</link>
                <guid>v4.chriskrycho.com/breaking-up-with-social-media/</guid>
                <description>&lt;p&gt;&lt;i class=&#x27;assumed-audience&#x27;&gt;&lt;b&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.chriskrycho.com&#x2F;2018&#x2F;assumed-audiences.html&quot;&gt;Assumed Audience&lt;&#x2F;a&gt;:&lt;&#x2F;b&gt; anyone &lt;em&gt;willing&lt;&#x2F;em&gt; to think hard about social media and its place in our lives.&lt;&#x2F;i&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-the-itch&quot;&gt;I. The Itch&lt;&#x2F;h2&gt;
&lt;p&gt;I began writing this post from our vacation bedroom in Jamaica, about five days before I could possibly publish it: before we left, I shut down the machines which can generate new versions of my site. I wished, as I started this post, that I had an equally effective measure for cutting off access to social media on this trip.&lt;&#x2F;p&gt;
&lt;p&gt;I tried, of course. Before we left on June 1, I removed Slack and Discord from my iPad (I had long since taken them off my phone). I likewise removed email from my phone, and I have also mostly been leaving my phone in our room. I kept an email client on my iPad, but I have checked my email only once a day or so—mostly in the interest of clearing my inbox, but also because the newsletters I subscribe to make for very good reading materials.&lt;&#x2F;p&gt;
&lt;p&gt;All of this preparation was good. It worked well. The first few days of our vacation were filled, blissfully, with mental silence.&lt;&#x2F;p&gt;
&lt;p&gt;Then I signed into Twitter on June 3, as news started breaking from Apple’s &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;wwdc19&#x2F;&quot;&gt;&lt;abbr title=&quot;World Wide Developer Conference&quot;&gt;WWDC&lt;&#x2F;abbr&gt;&lt;&#x2F;a&gt; event. It was fun seeing people’s reactions, and I learned a fair bit about &lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;xcode&#x2F;swiftui&#x2F;&quot;&gt;news which excites me a great deal&lt;&#x2F;a&gt;—people were already digging into the new tools and tweeting about them! But it also flipped back on the part of my brain that has been trained (by 14 years of using first Facebook and then Twitter) to &lt;em&gt;obsessively check social media&lt;&#x2F;em&gt;. Mid-afternoon on June 7, I recognized the difference this was making in my mental life. (Yes, it took me most of a week to see it clearly; social media’s effects are insidious.) I signed back out of Twitter’s web client and committed not to sign back in until after our vacation.&lt;&#x2F;p&gt;
&lt;p&gt;I have felt throughout the ensuing days—especially the first—what I can only describe as a mental &lt;em&gt;itch&lt;&#x2F;em&gt;: and it can be scratched only by signing into Twitter, and skimming down through the things people have said, and clicking the little heart button on some of them, and seeing if anyone has interacted with any of my own posts along the way, and trying to say something clever or interesting to elicit more such responses, and refreshing the feed, and skimming down through the things people have said, and…&lt;&#x2F;p&gt;
&lt;p&gt;I dislike the feeling intensely. The itch itself is a distraction, and scratching the itch would produce only more (and worse) distraction. As Craig Mod &lt;a href=&quot;https:&#x2F;&#x2F;craigmod.com&#x2F;roden&#x2F;027&#x2F;&quot;&gt;described it&lt;&#x2F;a&gt; recently:&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#draft-2&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Something fires off in the back of the skull, and then again. No conscious complicity, all autonomous, micro-stimulations. Triggered by: A scroll, a reload, a pull to refresh, a like, a share, the right headline. I can now pinpoint this sequence of involuntary response to be the tiny &lt;em&gt;physio&lt;&#x2F;em&gt;logical loop my body runs through when using Twitter or Instagram.…&lt;&#x2F;p&gt;
&lt;p&gt;I find the tiny loop problem to be terrifying. Tiny loops tend to be perfectly designed to satisfy the id’s raw impulses. That raw id is great fuel for creativity. The concern I have coming back and feeling the loops again for the first time in a long time is: if you’re not careful, tweets and their ilk can burn all your fuel with nothing to show.…&lt;&#x2F;p&gt;
&lt;p&gt;This pain is a withdrawal symptom. But if you get over that compulsion for info-stimulation, you are presented with an opportunity to replace the tiny loops with much more rewarding activities.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;draft-2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;in a newsletter he published after I had already written two full drafts of this post: it was confirmation, not inspiration.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;ii-the-costs&quot;&gt;II. The Costs&lt;&#x2F;h2&gt;
&lt;p&gt;I have long observed that my use of Twitter hijacks my mental habits in many other contexts.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#slack&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; I find myself responding to a book’s ideas not with consideration but with ideas for clever or snarky tweets. (This happened to me multiple times on this trip, including after I had already drafted and repeatedly revised this post!) It is not only Twitter which can have this effect, of course: I have experienced it with blogging as well. But I find that this particularly twisted, &lt;em&gt;distracted&lt;&#x2F;em&gt; form of thinking increases in direct proportion to the amount I use Twitter, and much less so with other forms of writing.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;slack&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;So do a number of other platforms, whose use I am reconsidering as well—mostly anything &lt;em&gt;chat&lt;&#x2F;em&gt;-like.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Twitter misaligns my mind even when I am away from it. It discourages &lt;em&gt;thought&lt;&#x2F;em&gt;. As Mod put it, “if you’re not careful, tweets and their ilk can burn all your fuel with nothing to show.” Exactly that. I spend time on Twitter and come out feeling like I have done &lt;em&gt;something&lt;&#x2F;em&gt; but in reality the cycles spent there are pure waste. No thought. No writing. No learning.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#learned&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; No time spent with my family or friends. Nothing but more fodder for the &lt;a href=&quot;https:&#x2F;&#x2F;stratechery.com&#x2F;2018&#x2F;data-factories&#x2F;&quot;&gt;data factory&lt;&#x2F;a&gt; and the advertisement money it generates.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;learned&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;Not &lt;em&gt;truly&lt;&#x2F;em&gt; learned. A new fact found, perhaps, but facts acquired are not the same as learning done. More rarely, a link to a place I &lt;em&gt;can&lt;&#x2F;em&gt; learn something. But such links exist in many places!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The counter-arguments mount up, of course—as they do whenever we think of eliminating a pleasurable vice:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;But how would I interact with other people in the Rust and Swift communities around ideas or questions I have?&lt;&#x2F;li&gt;
&lt;li&gt;Wouldn’t it be a waste of slowly-built-up influence in the Rust and Ember and TypeScript communities to be absent from that space?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;…but it turns out, those are the only questions. Both of them are easily answered, too. The aforementioned communities exist, &lt;em&gt;and exist in much richer ways&lt;&#x2F;em&gt;, in contexts besides Twitter—forums, chat, etc. Those other contexts have their own dysfunctions (chat particularly so), but those I will address in their own ways. I can use what influence I do have in those communities more effectively by writing here, answering questions elsewhere, and building software or writing docs or the like. There is simply no sense in which I &lt;em&gt;must&lt;&#x2F;em&gt; be on Twitter for professional reasons.&lt;&#x2F;p&gt;
&lt;p&gt;Moreover, very little of what happens on Twitter is of any lasting import. There is a great deal of Thought Leading,&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#tl&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; but the medium discourages careful, rich, context-sensitive writing: just what is necessary for real work (and not just screaming mobs or fanboying). This is equally as true of software development as of theology. The medium dominates the message. Twitter threads, as I have &lt;a href=&quot;https:&#x2F;&#x2F;www.chriskrycho.com&#x2F;2018&#x2F;on-tweeting-instead-of-writing.html&quot;&gt;noted before&lt;&#x2F;a&gt; (and see also &lt;a href=&quot;https:&#x2F;&#x2F;www.chriskrycho.com&#x2F;2018&#x2F;tweet-less-blog-more.html&quot;&gt;here&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.chriskrycho.com&#x2F;2017&#x2F;the-value-of-silence.html&quot;&gt;here&lt;&#x2F;a&gt;), are much worse than something like a blog post for their intended purpose. The defining feature of Twitter—the &lt;em&gt;reply&lt;&#x2F;em&gt;—is a bug and not a feature. I &lt;em&gt;love&lt;&#x2F;em&gt; thoughtful replies to my writing… which is &lt;em&gt;precisely why I don’t have comments here but encourage people to email me instead&lt;&#x2F;em&gt;—and Twitter has a far, far worse signal-to-noise ratio than do blog comments. Where’s the upside?&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;tl&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;and, worse but in far greater quantity, &lt;em&gt;wannabe&lt;&#x2F;em&gt; Thought Leading&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Mod again:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think we’ll look back with shock on many “fundamentals” of the internet as it exists today. I’m still amazed that any private organization would allow unfiltered public commenting. I remain totally unconvinced of its benefits. Twitter, in this sense, is just insanity — an endless stream of public comment posturing and signaling and, largely, screaming. Dumb dumb. Basic ’net folly 101.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If I still feel a bit &lt;a href=&quot;https:&#x2F;&#x2F;thefrailestthing.com&#x2F;2019&#x2F;06&#x2F;08&#x2F;devils-bargain&#x2F;&quot;&gt;the way L. M. Sacasas does&lt;&#x2F;a&gt;,&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#draft-1&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; too—&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;ditching the platform and going indie, as it were, works better when you’ve already got a large audience that is going to follow you where ever you go or an established community (a convivial society, I’d dare say), online and off, with which to sustain your intellectual life. I’m pretty sure I don’t quite have the former, and I’ve struggled to find that latter, making my way as an independent scholar of sorts these last several years.&lt;&#x2F;p&gt;
&lt;p&gt;But again, this is not to say that Alan is wrong, only that my counting the cost is a more conflicted affair.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;—well, so be it. For as he notes himself, the toll &lt;em&gt;will&lt;&#x2F;em&gt; be paid, one way or another:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In any case, I can feel Twitter working on me as I’ve begun to use it more frequently of late and allowed myself to tweet as well as read. I can feel it working on me in much the same way that, in Tolkien’s world, the wearer’s of the Ring can feel it working on them. It leaves one feeling weary, thin, exposed, morally compromised, divided, etc., while deeply distorting one’s view of reality. And, as far as I’m concerned, there are no Tom Bombadil’s, immune to the ring’s power, among us in this case.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;draft-1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;in a post, I note, which I had not seen when I wrote the &lt;em&gt;first&lt;&#x2F;em&gt; draft of this post! There is something in the air right now, and I’m glad of it.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;iii-complicity&quot;&gt;III. Complicity&lt;&#x2F;h2&gt;
&lt;p&gt;Counting the cost is complicated in another way for me, too: To what extent can I do this &lt;em&gt;because&lt;&#x2F;em&gt; of my use of Twitter? This site’s audience includes readers who first encountered me and my work &lt;em&gt;there&lt;&#x2F;em&gt;. Even my freedom to leave social media benefits from having used those tools. I cannot escape a degree of complicity in the degradations and distortions that social media have wrought in our culture and our public and our civic life. The best I can say for myself is that I have consciously chosen to eschew click-driven writing for half a decade, whether using Twitter or no. As regards that inescapable complicity, all any of us can do is acknowledge our faults—or, as &lt;a href=&quot;https:&#x2F;&#x2F;biblehub.com&#x2F;james&#x2F;5-16.htm&quot;&gt;my faith&lt;&#x2F;a&gt; would &lt;a href=&quot;https:&#x2F;&#x2F;biblehub.com&#x2F;1_john&#x2F;1-9.htm&quot;&gt;have it&lt;&#x2F;a&gt;, confess and repent of our sins—and seek to make amends.&lt;&#x2F;p&gt;
&lt;p&gt;And there is yet more at stake here. Twitter (like Facebook) is more than merely &lt;em&gt;complicit&lt;&#x2F;em&gt; in the transformation of our world into an attention economy. They have &lt;em&gt;driven&lt;&#x2F;em&gt; it. Their technocratic, restraint-less approach to the world is foolish—at best. And they are unrepentant; “wicked” may thus be not too strong a word.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#ws&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; Continuing to use these services only further cements their primacy. As Alan Jacobs &lt;a href=&quot;https:&#x2F;&#x2F;blog.ayjay.org&#x2F;to-put-the-point-plainly&#x2F;&quot;&gt;put it&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The decision to be on Twitter (or Facebook, etc.) is not simply a personal choice. It has run-on effects for you but also for others. When you use the big social media platforms you contribute to their power and influence, and you deplete the energy and value of the open web. You make things worse for everyone. I truly believe that.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;ws&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;6&lt;&#x2F;sup&gt;
&lt;p&gt;conclusions I have drawn the more starkly through thinking-out-loud about it with my friend &lt;a href=&quot;https:&#x2F;&#x2F;stephencarradini.com&quot;&gt;Stephen&lt;&#x2F;a&gt; throughout &lt;a href=&quot;https:&#x2F;&#x2F;winningslowly.org&quot;&gt;Winning Slowly&lt;&#x2F;a&gt; seasons &lt;a href=&quot;https:&#x2F;&#x2F;winningslowly.org&#x2F;season-6.html&quot;&gt;6&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;winningslowly.org&#x2F;season-7.html&quot;&gt;7&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Even insofar as I do get value from being on Twitter—being able to throw out a question about Rust or Swift or Ember or TypeScript, confident that I will get a knowledgeable answer—I increasingly wonder about the power and social dynamics in play. Is it &lt;em&gt;good&lt;&#x2F;em&gt; or &lt;em&gt;right&lt;&#x2F;em&gt; that, because I have blogged, have worked on open source projects, and have run a successful podcast, I have a greater degree of access? While I have worked hard at those projects, my success in them does not make my questions or interests &lt;em&gt;more important&lt;&#x2F;em&gt; than anyone else’s. Put more bluntly: I do not &lt;em&gt;deserve&lt;&#x2F;em&gt; the attention of Swift compiler developers or Rust or Ember core team members or the TypeScript &lt;abbr title=&quot;product manager&quot;&gt;PM&lt;&#x2F;abbr&gt;. But I can get that attention, and easily, on Twitter. Some of this is ordinary human social dynamics: earned social trust and so on. But I wonder if Twitter does not &lt;em&gt;heighten&lt;&#x2F;em&gt; the effect. Certainly it seems to me that it may.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;iv-the-end-and-a-new-beginning&quot;&gt;IV. The End, and a New Beginning&lt;&#x2F;h2&gt;
&lt;p&gt;Leaving Twitter myself will not begin to undo all of that. But I can undercut, in some small way, the pressure so many other people&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#everyone&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; feel to be on Twitter for professional reasons. Insofar as my own public work succeeds without Twitter, I hope that success helps others come to feel the same freedom. Something more like the &lt;a href=&quot;http:&#x2F;&#x2F;tantek.com&#x2F;2010&#x2F;281&#x2F;b1&#x2F;what-is-the-open-web&quot;&gt;open web&lt;&#x2F;a&gt; and the old indie blogger network ethos is a step in the right direction—not in spite of its frictions; rather &lt;a href=&quot;https:&#x2F;&#x2F;blog.ayjay.org&#x2F;scale-is-the-enemy&#x2F;&quot;&gt;&lt;em&gt;because&lt;&#x2F;em&gt; it does not scale&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And more than that: getting &lt;a href=&quot;https:&#x2F;&#x2F;buttondown.email&#x2F;chriskrycho&#x2F;archive&#x2F;the-slow-web-and-the-limits-of-solutions&#x2F;&quot;&gt;offline entirely&lt;&#x2F;a&gt; at times and for seasons. Remembering the rhythms of life common to all human beings up till a few short years ago. Quietly reading books and talking with friends. It’s time for many more of us to embrace the kind of social media monasticism &lt;a href=&quot;https:&#x2F;&#x2F;thefrailestthing.com&#x2F;2018&#x2F;03&#x2F;27&#x2F;vows-of-digital-poverty&#x2F;&quot;&gt;Sacasas outlined&lt;&#x2F;a&gt; in the midst of the #DeleteFacebook movement (and which Stephen and I have talked about so much &lt;a href=&quot;https:&#x2F;&#x2F;winningslowly.org&#x2F;season-7.html&quot;&gt;this season of Winning Slowly&lt;&#x2F;a&gt;). I want my attention back, but even more importantly I want to show that &lt;i&gt;this is not all that can or should be&lt;&#x2F;i&gt;. There are alternative paths we might yet take.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;everyone&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;7&lt;&#x2F;sup&gt;
&lt;p&gt;I initially wrote “everyone” instead of “so many other people” here, but I noticed that that’s simply (very!) wrong: it’s central to the vicious cycle of pressure that social media &lt;em&gt;creates&lt;&#x2F;em&gt;. “Everyone is here; you’ll miss out on such important things!” is &lt;em&gt;the&lt;&#x2F;em&gt; lie of these platforms.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;So: I have deleted all my tweets save one: a link to this post. I am doing much the same with Facebook and LinkedIn.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#LI&quot;&gt;8&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; I hope you’ll consider doing something similar!&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;LI&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;8&lt;&#x2F;sup&gt;
&lt;p&gt;While I do have reservations about LinkedIn, they are different both in kind and in degree than my concerns about other social media platforms—as my taking a job there just a few months ago should indicate! I would &lt;em&gt;not&lt;&#x2F;em&gt; have taken a job with Facebook or Twitter. I will probably elaborate on this at some point, as I think it’s worth tracing out how and why I see these as meaningfully different!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Going forward, I will be doing much more writing here. I will also continue to publish &lt;a href=&quot;https:&#x2F;&#x2F;buttondown.email&#x2F;chriskrycho&quot;&gt;my newsletter&lt;&#x2F;a&gt;, normally on a weekly basis. I will still be &lt;a href=&quot;https:&#x2F;&#x2F;www.chriskrycho.com&#x2F;podcasts&quot;&gt;podcasting&lt;&#x2F;a&gt;. I hope (and expect) to be writing more full-on essays—the area more than any other where I have felt the drain from social media’s interference. And I will be working on &lt;a href=&quot;https:&#x2F;&#x2F;buttondown.email&#x2F;rewrite&quot;&gt;rewrite&lt;&#x2F;a&gt;! And if you’d like to get in touch, you can always &lt;a href=&quot;mailto:hello@chriskrycho.com&quot;&gt;email me&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>What even is a potato, am I right?</title>
                <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
                <link>v4.chriskrycho.com/2018/potato/</link>
                <guid>v4.chriskrycho.com/2018/potato/</guid>
                <description>&lt;p&gt;Potatos are yummy.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>True Myth 2.2</title>
                <pubDate>Sat, 27 Oct 2018 17:00:00 -0700</pubDate>
                <link>v4.chriskrycho.com/true-myth-22/</link>
                <guid>v4.chriskrycho.com/true-myth-22/</guid>
                <description>&lt;p&gt;I just released v2.2&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; of True Myth, with two new pairs of helpers to deal with &lt;a href=&quot;v4.chriskrycho.com&#x2F;true-myth-22&#x2F;#safe-java-script-object-property-lookup&quot;&gt;safe JavaScript object property lookup with &lt;code&gt;Maybe&lt;&#x2F;code&gt;s&lt;&#x2F;a&gt; and &lt;a href=&quot;v4.chriskrycho.com&#x2F;true-myth-22&#x2F;#handling-exception-throwing-functions&quot;&gt;handling exception-throwing code with &lt;code&gt;Result&lt;&#x2F;code&gt;s&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;safe-javascript-object-property-lookup&quot;&gt;Safe JavaScript object property lookup&lt;&#x2F;h2&gt;
&lt;p&gt;We often deal with &lt;em&gt;optional properties&lt;&#x2F;em&gt; on JavaScript objects, and by default JavaScript just gives us &lt;code&gt;undefined&lt;&#x2F;code&gt; if a property doesn&#x27;t exist on an object and we look it up:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;type Person = {
  name?: string;
};

let me: Person = { name: &#x27;Chris&#x27; };
console.log(me.name); &#x2F;&#x2F; Chris

let anonymous: Person = {};
console.log(anonymous.name); &#x2F;&#x2F; undefined
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can already work around that with &lt;code&gt;Maybe.of&lt;&#x2F;code&gt;, of course:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;function printName(p: Person) {
  let name = Maybe.of(p.name);
  console.log(name.unwrapOr(&#x27;&amp;lt;anonymous&amp;gt;&#x27;));
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But this is a &lt;em&gt;really&lt;&#x2F;em&gt; common pattern! &lt;code&gt;Maybe.property&lt;&#x2F;code&gt; is a convenience method for dealing with this:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;function printName(p: Person) {
  let name = Maybe.property(&#x27;name&#x27;, p);
  console.log(name.unwrapOr(&#x27;&amp;lt;anonymous&amp;gt;&#x27;));
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At first blush, this might be a head-scratcher: after all, it&#x27;s actually slightly &lt;em&gt;longer&lt;&#x2F;em&gt; than doing it with &lt;code&gt;Maybe.of&lt;&#x2F;code&gt;. However, it ends up showing its convenience when you&#x27;re using the curried form in a functional pipeline. For example, if we had a &lt;em&gt;list&lt;&#x2F;em&gt; of people, and wanted to get a list of just the people&#x27;s names (ignoring anonymous people), we might do this:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;function justNames(people: Person[]): string[] {
  return people
    .map(Maybe.property(&#x27;name&#x27;))
    .filter(Maybe.isJust)
    .map(Just.unwrap);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another common scenario is dealing with the same kind of lookup, but in the context of a &lt;code&gt;Maybe&lt;&#x2F;code&gt; of an object. Prior to 2.2.0, we could do this with a combination of &lt;code&gt;Maybe.of&lt;&#x2F;code&gt; and &lt;code&gt;andThen&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;function getName(maybePerson: Maybe&amp;lt;Person&amp;gt;): string {
  return maybePerson.andThen(p =&amp;gt; Maybe.of(p.name));
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is harder to compose than we might like, and we &lt;em&gt;can&#x27;t&lt;&#x2F;em&gt; really write it in a &amp;quot;point free&amp;quot; style, even if that&#x27;s more convenient. We also end up repeating the &lt;code&gt;andThen&lt;&#x2F;code&gt; invocation every time we go down a layer if we have a more deeply nested object than this. Accordingly, 2.2.0 also adds another convenience method for dealing with deeply nested lookups on objects in a type-safe way: &lt;code&gt;Maybe.get&lt;&#x2F;code&gt; (and the corresponding instance methods).&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&#x2F;&#x2F; Function version:
function getNameFn(maybePerson: Maybe&amp;lt;Person&amp;gt;): string {
  return Maybe.get(&#x27;name&#x27;, maybePerson);
}

&#x2F;&#x2F; Method version
function getNameM(maybePerson: Maybe&amp;lt;Person&amp;gt;): string {
  return maybePerson.get(&#x27;name&#x27;);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, since the function version is curried, we can use this to create other little helper functions along the way:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;const getName = Maybe.get(&#x27;name&#x27;);

function getAllNames(people: Maybe&amp;lt;Person&amp;gt;[]): string[] {
  return people
    .map(getName)
    .filter(Maybe.isJust)
    .map(Just.unwrap);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And if our object is a deeper type:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;type ComplicatedPerson = {
  name?: {
    first?: string;
    last?: string;
  };
};

let none: Maybe&amp;lt;ComplicatedPerson&amp;gt; = Maybe.nothing();
console.log(none.get(&#x27;name&#x27;).toString());
&#x2F;&#x2F; Nothing
console.log(none.get(&#x27;name&#x27;).get(&#x27;first&#x27;).toString());
&#x2F;&#x2F; Nothing

let nameless: Maybe&amp;lt;ComplicatedPerson&amp;gt; = Maybe.just({});
console.log(nameless.get(&#x27;name&#x27;).toString());
&#x2F;&#x2F; Just([object Object]);
console.log(nameless.get(&#x27;name&#x27;).get(&#x27;first&#x27;).toString());
&#x2F;&#x2F; Nothing

let firstOnly: Maybe&amp;lt;ComplicatedPerson&amp;gt; = Maybe.just({
  name: {
    first: &#x27;Chris&#x27;,
  },
});
console.log(firstOnly.get(&#x27;name&#x27;).toString());
&#x2F;&#x2F; Just([object Object]);
console.log(firstOnly.get(&#x27;name&#x27;).get(&#x27;first&#x27;).toString());
&#x2F;&#x2F; Just(Chris);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that in these cases, since the type we&#x27;re dealing with is some kind of object with specific keys, if you try to pass in a key which doesn&#x27;t existing on the relevant object type, you&#x27;ll get a type error. (Or, if you&#x27;re using the curried version, if you try to pass an object which doesn&#x27;t have that key, you&#x27;ll get a type error.) However, we also often use JavaScript objects as &lt;em&gt;dictionaries&lt;&#x2F;em&gt;, mapping from a key to a value (most often, but not always, a &lt;em&gt;string&lt;&#x2F;em&gt; key to a specific value type). &lt;code&gt;Maybe.property&lt;&#x2F;code&gt; and &lt;code&gt;Maybe.get&lt;&#x2F;code&gt; both work with dictionary types as well.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;type Dict&amp;lt;T&amp;gt; = { [key: string]: T };

let ages: Dict&amp;lt;number&amp;gt; = {
  &#x27;chris&#x27;: 31,
};

console.log(Maybe.property(&#x27;chris&#x27;, ages)); &#x2F;&#x2F; Just(31)
console.log(Maybe.property(&#x27;joe&#x27;, ages)); &#x2F;&#x2F; Nothing

let maybeAges: Maybe&amp;lt;Dict&amp;lt;number&amp;gt;&amp;gt; = Maybe.of(ages);
console.log(ages.get(&#x27;chris&#x27;)); &#x2F;&#x2F; Just(31)
console.log(ages.get(&#x27;joe&#x27;)); &#x2F;&#x2F; Nothing
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hopefully you&#x27;ll find these helpful! I ran into the motivating concerns for them pretty regularly in the codebase I work with each day, so I&#x27;m looking forward to integrating them into that app!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;handling-exception-throwing-functions&quot;&gt;Handling exception-throwing functions&lt;&#x2F;h2&gt;
&lt;p&gt;The other big additions are the &lt;code&gt;Result.tryOr&lt;&#x2F;code&gt; and &lt;code&gt;Result.tryOrElse&lt;&#x2F;code&gt; functions. Both of these help us deal with functions which throw exceptions. Since JavaScript doesn&#x27;t have any &lt;em&gt;native&lt;&#x2F;em&gt; construct like &lt;code&gt;Result&lt;&#x2F;code&gt;, idiomatic JavaScript &lt;em&gt;does&lt;&#x2F;em&gt; often throw exceptions. And that can be frustrating you want to have a value type like a &lt;code&gt;Result&lt;&#x2F;code&gt; to deal with instead.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes, you don&#x27;t care &lt;em&gt;what&lt;&#x2F;em&gt; the exception was; you just want a default value (or a value constructed from the local state of your program, but either way just one value) you can use as the error to keep moving along through your program. In that case, you wrap a function which throws an error in &lt;code&gt;Result.tryOr&lt;&#x2F;code&gt;. Let&#x27;s assume we have a function either returns a number of throws an error, which we&#x27;ll just call &lt;code&gt;badFunction&lt;&#x2F;code&gt; because the details here don&#x27;t really matter.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;const err = &#x27;whoops! something went wrong!&#x27;;
const result = Result.tryOr(err, badFunction());
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;result&lt;&#x2F;code&gt; value has the type &lt;code&gt;Result&amp;lt;number, string&amp;gt;&lt;&#x2F;code&gt;. If &lt;code&gt;badFunction&lt;&#x2F;code&gt; through an error, we have an &lt;code&gt;Err&lt;&#x2F;code&gt; with the value &lt;code&gt;&#x27;whoops! something went wrong!&#x27;&lt;&#x2F;code&gt; in it. If it &lt;em&gt;didn&#x27;t&lt;&#x2F;em&gt; throw an error, we have an &lt;code&gt;Ok&lt;&#x2F;code&gt; with the number returned from &lt;code&gt;badFunction&lt;&#x2F;code&gt; in it. Handy!&lt;&#x2F;p&gt;
&lt;p&gt;Of course, we often want to &lt;em&gt;do something&lt;&#x2F;em&gt; with the exception that gets thrown. For example, we might want to log an error to a bug-tracking service, or display a nice message to the user, or any number of other things. In that case, we can use the &lt;code&gt;Result.tryOrElse&lt;&#x2F;code&gt; function. Let&#x27;s imagine we have a function &lt;code&gt;throwsHelpfulErrors&lt;&#x2F;code&gt; which returns a &lt;code&gt;number&lt;&#x2F;code&gt; or does just what it says on the tin: it throws a bunch of different kinds of errors, which are helpfully distinct and carry around useful information with them. Note that the type of the error-handling callback we pass in is &lt;code&gt;(error: unknown) =&amp;gt; E&lt;&#x2F;code&gt;, because JS functions can throw &lt;em&gt;anything&lt;&#x2F;em&gt; as their error.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;const handleErr = (e: unknown): string =&amp;gt; {
  if (e instanceof Error) {
    return e.message;
  } else if (typeof e === &#x27;string&#x27;) {
    return e;
  } else if (typeof e === &#x27;number&#x27;) {
    return &#96;Status code: ${e}&#96;;
  } else {
    return &#x27;Unknown error&#x27;;
  }
}

const result = Result.tryOrElse(handleErr, throwsHelpfulErrors);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code&gt;result&lt;&#x2F;code&gt; is once again a &lt;code&gt;Result&amp;lt;number, string&amp;gt;&lt;&#x2F;code&gt;, but the error side has whatever explanatory information the exception provided to us, plus some massaging we did ourselves. This is particularly handy for converting exceptions to &lt;code&gt;Result&lt;&#x2F;code&gt;s when you have a library which uses exceptions extensively, but in a carefully structured way. (You could, in fact, just use an identity function to return whatever error the library throws—as long as you write your types carefully and accurately as a union of those error types for the &lt;code&gt;E&lt;&#x2F;code&gt; type parameter! However, doing that would require you to explicitly opt into the use of &lt;code&gt;any&lt;&#x2F;code&gt; to write it as a simple identity function, so I&#x27;m not sure I&#x27;d &lt;em&gt;recommend&lt;&#x2F;em&gt; it. If you go down that path, do it with care.)&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;And that&#x27;s it for True Myth 2.2! Enjoy, and of course please &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;true-myth&#x2F;true-myth&#x2F;issues&quot;&gt;open an issue&lt;&#x2F;a&gt; if you run into any bugs!&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bmakuh&quot;&gt;Ben Makuh&lt;&#x2F;a&gt; for implementing &lt;code&gt;Result.tryOr&lt;&#x2F;code&gt; and &lt;code&gt;Result.tryOrElse&lt;&#x2F;code&gt;. Thanks to Ben and also &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tansongyang&quot;&gt;Frank Tan&lt;&#x2F;a&gt; for helpful input on the &lt;code&gt;Maybe.get&lt;&#x2F;code&gt; and &lt;code&gt;Maybe.property&lt;&#x2F;code&gt; &lt;abbr&gt;API&lt;&#x2F;abbr&gt; design!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;I published both &lt;code&gt;2.2.0&lt;&#x2F;code&gt; and &lt;code&gt;2.2.1&lt;&#x2F;code&gt;, because once again I missed something along the way. This time it was making sure all the new functions were optionally curried to support partial application.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</description>
            </item>
        
            <item>
                <title>Blog as Note-Taking Tool</title>
                <pubDate>Mon, 16 Jul 2018 07:00:00 -0700</pubDate>
                <link>v4.chriskrycho.com/blog-as-note-taking-tool/</link>
                <guid>v4.chriskrycho.com/blog-as-note-taking-tool/</guid>
                <description>&lt;p&gt;I have a habit that might not make sense to you. I reread my own blog posts fairly regularly. It’s not vanity—not some weird obsession with my own awesomeness in the form of my own writing or some such nonsense. It’s that in my blog posts over the last decade, I have a pretty serious backlog of &lt;em&gt;what I was thinking about at any given point in time.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It’s not exhaustive, by a long shot. It only includes things I actually decided to publish.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; There are, sadly, not many short thoughts in the mix. Nor is it well-tagged or organized in any internally-consistent way—even in any single version of the site, much less across versions. But nonetheless the history is still there, and I &lt;em&gt;can&lt;&#x2F;em&gt; traverse the various lines through it, such as they are. (Sometimes, even, the changes in organization and structure are illuminating about how I was thinking about things at the time!) In any case, my habit of linking to previous references to ideas has proven invaluable for the times when I want to trawl back through old posts and consider those old thoughts again.&lt;&#x2F;p&gt;
&lt;p&gt;Reading old blog posts is a strange experience, of course. The person who wrote these things was recognizably myself; but I am not who I then I was, and I sometimes disagree with myself on the substance and often on the style. (I occasionally find an old gem and wonder how I ever managed to write so well.) That very strangeness, it turns out, is why I do this every so often, though. Thinking well is often a matter of forging connections between ideas that were previously not connected for us. We cannot consciously hold in our minds even a fraction of all the things we have thought about or even written something about over the years. We can, however, jog our memories, and let new connections form. And rereading one’s own blog post is a great way to do that.&lt;&#x2F;p&gt;
&lt;p&gt;I’d not heard specifically of the &lt;a href=&quot;https:&#x2F;&#x2F;zettelkasten.de&quot;&gt;Zettelkasten method&lt;&#x2F;a&gt; until Alan Jacobs linked it a while back, but it fits this model pretty perfectly, and maps as well to ways I’ve been &lt;em&gt;trying&lt;&#x2F;em&gt; to structure my note-taking and thinking for the past few years. (I’m going to be consciously doing more of this in &lt;a href=&quot;http:&#x2F;&#x2F;www.bear-writer.com&quot;&gt;Bear&lt;&#x2F;a&gt;, my current notes app of choice. I’ll probably write up my experience that way once I’ve actually had some experience!) But this also ties into some of the things Jacobs has been &lt;a href=&quot;https:&#x2F;&#x2F;blog.ayjay.org&#x2F;the-blog-garden&#x2F;&quot; title=&quot;The Blog Garden&quot;&gt;musing out loud&lt;&#x2F;a&gt; about in his own blog over the last week. It’s not just that a blog can serve as a place to do some of the fleshing-out of ideas. It’s not just that a blog can be a record of the development of ideas. It can also serve to jog new ideas if you read yourself again, displaced (both literally and temporally) from the original writing of the thing. A blog is kind of like a public notebook, and while it &lt;em&gt;may&lt;&#x2F;em&gt; be useful for others to browse through it, is &lt;em&gt;is&lt;&#x2F;em&gt; useful for me to browse back through it.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;&lt;pre&gt;&lt;code&gt;Though: if you look at the archives, especially including those on my [first real blog](http:&#x2F;&#x2F;blog.chriskrycho.com &amp;quot;Thoughts; A Flame&amp;quot;) and [the previous iteration of this site](http:&#x2F;&#x2F;2012-2013.chriskrycho.com), you’ll notice that I published a lot of posts about a lot of subjects, whether my thoughts were especially well-formed or not.
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
</description>
            </item>
        
            <item>
                <title>Higher-Order Components in Ember.js</title>
                <pubDate>Sat, 26 May 2018 14:00:00 -0600</pubDate>
                <link>v4.chriskrycho.com/ember-hoc/</link>
                <guid>v4.chriskrycho.com/ember-hoc/</guid>
                <description>&lt;p&gt;One of the most powerful patterns in programming is the idea of &lt;em&gt;higher-order functions&lt;&#x2F;em&gt;: functions which can take other functions as arguments or return them as their return values. If you’ve spent much time at all working in JavaScript, you’ve certainly encountered these—whether you’re using &lt;code&gt;Array.map&lt;&#x2F;code&gt; to transform the values in an array, or passing a function as an argument to an event handler.&lt;&#x2F;p&gt;
&lt;p&gt;The same pattern is incredibly useful in building components, and most modern front-end frameworks support it—including Ember.js! (In React, the pattern as a whole is often known as the &lt;code&gt;renderProps&lt;&#x2F;code&gt; pattern, for the way you most often accomplish it. It&#x27;s all the same idea, though!)&lt;&#x2F;p&gt;
&lt;p&gt;In this little post, I’ll show you how to build a small “higher-order component” in Ember.js, hopefully demystifying that term a little bit a long the way. (If you just want to see how the pieces fit together, you can see the finished app &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;chriskrycho&#x2F;ember-hoc-example&quot;&gt;in this repo&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;aside&gt;
&lt;p&gt;I’m going to be using classes and decorators throughout. Both are very much ready-to-go in Ember, and I commend them to you! I’m also going to be using some of the new &lt;a href=&quot;https:&#x2F;&#x2F;emberjs.com&#x2F;blog&#x2F;2018&#x2F;04&#x2F;13&#x2F;ember-3-1-released.html#toc_introducing-optional-features-3-of-4&quot;&gt;optional features&lt;&#x2F;a&gt; available in Ember 3.1+ to use template-only components!&lt;&#x2F;p&gt;
&lt;p&gt;Note that one of the most important consequences of this is that arguments have to be referenced as &lt;code&gt;@theArgumentName&lt;&#x2F;code&gt; rather than just &lt;code&gt;theArgumentName&lt;&#x2F;code&gt; in templates. The reason is precisely that there is no backing JavaScript component. In old-school Ember.js components, &lt;code&gt;{{theArgumentName}}&lt;&#x2F;code&gt; is implicitly turned into &lt;code&gt;{{this.argumentName}}&lt;&#x2F;code&gt;, which does a lookup on the backing component. In Glimmer-style components—of which these are the first part—arguments live on a designated &lt;code&gt;args&lt;&#x2F;code&gt; property and are accessible in templates via &lt;code&gt;@theArgumentName&lt;&#x2F;code&gt; instead.&lt;&#x2F;p&gt;
&lt;&#x2F;aside&gt;
&lt;h2 id=&quot;higher-order-components-what-are-they&quot;&gt;Higher-Order Components, What Are They&lt;&#x2F;h2&gt;
&lt;p&gt;Just like with a “higher-order function,” all we mean when we talk about a “higher-order component” is a component which takes other components as arguments, returns other components itself (in Ember’s case via &lt;code&gt;yield&lt;&#x2F;code&gt; in a template), or both.&lt;&#x2F;p&gt;
&lt;p&gt;The thing we’re actually going to build here is a “modal” which accepts an optional button as an arguments, and which yields out a component for dividing the modal into sections visually so you can pass your own content in and have it look just right. This is closely based on a component my colleagues and I at Olo built recently, just with some of our specific details stripped away to get at the actually important bits. Here&#x27;s what it looks like in practice:&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;f001.backblazeb2.com&#x2F;file&#x2F;chriskrycho-com&#x2F;images&#x2F;hoc-rendered.png&quot; alt=&quot;modal component with sections&quot;&gt;
&lt;figcaption&gt;a modal with sectioned text and a close button&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;The goal for the button arguments is to let the modal be able to render the button the caller passes in, while not being concerned with the &lt;em&gt;functionality&lt;&#x2F;em&gt; of the button. Otherwise, we’d have to tie the “API” of the modal to the details of button behavior, bind more actions into it, etc.&lt;&#x2F;p&gt;
&lt;p&gt;The goal for the yielded sectioning component is for whatever is rendering the modal itself to be able to pass content in and get it chunked up however the modal decides is appropriate—the modal can display its own styles, etc.—without having to worry about the details of applying classes or sectioning up the content itself.&lt;&#x2F;p&gt;
&lt;p&gt;In short, we want to &lt;em&gt;separate our concerns&lt;&#x2F;em&gt;: the modal knows how to lay out its contents and where to put buttons, but it doesn’t want to have to know &lt;em&gt;anything&lt;&#x2F;em&gt; about what the buttons do. The most complicated interaction in the world could be going on, and the modal won’t have to care. Likewise, things &lt;em&gt;using&lt;&#x2F;em&gt; the modal can pass content and buttons into it, and let the modal manage its own layout and so on without having to be concerned with the details of that. So what does that look like in practice?&lt;&#x2F;p&gt;
&lt;p&gt;The approach I use here builds on the &amp;quot;contextual components&amp;quot; pattern in Ember.js. The main new idea is that the &lt;em&gt;context&lt;&#x2F;em&gt; includes components!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementing-it&quot;&gt;Implementing It&lt;&#x2F;h2&gt;
&lt;p&gt;We have three components here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a button&lt;&#x2F;li&gt;
&lt;li&gt;a modal&lt;&#x2F;li&gt;
&lt;li&gt;a modal section&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Since Ember.js still (for now!) requires component names to be at least two words separated by a dash, we’ll just call these &lt;code&gt;x-button&lt;&#x2F;code&gt;, &lt;code&gt;x-modal&lt;&#x2F;code&gt;, and &lt;code&gt;x-modal-section&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;x-button&quot;&gt;&lt;code&gt;x-button&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The button component, we’ll keep pretty simple: it’s just a button element with a given label and an action bound to it:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;button class={{@buttonClass}} type=&#x27;button&#x27; {{action @onClick}}&amp;gt;
  {{@label}}
&amp;lt;&#x2F;button&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;x-modal&quot;&gt;&lt;code&gt;x-modal&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;x-modal&lt;&#x2F;code&gt; has the meat of the implementation.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&#x27;modal-backdrop&#x27;&amp;gt;&amp;lt;&#x2F;div&amp;gt;
&amp;lt;div class=&#x27;modal&#x27;&amp;gt;
  &amp;lt;div class=&#x27;modal-content&#x27;&amp;gt;
    {{yield (hash section=(component &#x27;x-modal-section&#x27;))}}
  &amp;lt;&#x2F;div&amp;gt;

  {{#if @button}}
    {{component @button buttonClass=&#x27;modal-button&#x27;}}
  {{&#x2F;if}}
&amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The two things two notice here are the &lt;code&gt;yield&lt;&#x2F;code&gt; and the &lt;code&gt;component&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;yield&lt;&#x2F;code&gt; statement yields a &lt;a href=&quot;https:&#x2F;&#x2F;www.emberjs.com&#x2F;api&#x2F;ember&#x2F;3.1&#x2F;classes&#x2F;Ember.Templates.helpers&quot;&gt;&lt;code&gt;hash&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; with one property: &lt;code&gt;section&lt;&#x2F;code&gt;. Yielding a hash is a convenient pattern in general. Here, we’re doing it to make the &lt;abbr&gt;API&lt;&#x2F;abbr&gt; nicer for users of this component. It means that if we name the yielded value &lt;code&gt;|modal|&lt;&#x2F;code&gt; when we invoke this, we’ll be able to write &lt;code&gt;modal.section&lt;&#x2F;code&gt; to name this particular yielded item. (You’ll see exactly this below.)&lt;&#x2F;p&gt;
&lt;p&gt;We use the &lt;code&gt;component&lt;&#x2F;code&gt; helper twice: once as the value of the &lt;code&gt;section&lt;&#x2F;code&gt; key in the yielded hash, and once for the &lt;code&gt;button&lt;&#x2F;code&gt; below. In both cases, the helper does the same thing: invokes a component! While the most common way to render a component is with its name, inline—like &lt;code&gt;{{x-modal}}&lt;&#x2F;code&gt;—you can always render it with the &lt;code&gt;component&lt;&#x2F;code&gt; helper and the name as a string: &lt;code&gt;{{component &#x27;x-modal&#x27;}}&lt;&#x2F;code&gt;. This lets you render different components dynamically!&lt;&#x2F;p&gt;
&lt;p&gt;Let’s remember our initial analogy: the same way you can pass different functions to a higher-order function like &lt;code&gt;Array.prototype.map&lt;&#x2F;code&gt;, you can pass different components to a higher-order component like our &lt;code&gt;x-modal&lt;&#x2F;code&gt; here. And just like you can &lt;em&gt;return&lt;&#x2F;em&gt; a function from a higher-order function, we can &lt;em&gt;yield&lt;&#x2F;em&gt; a component from a higher-order component. Just like higher-order functions, the function passed in or returned just has to have the right shape.&lt;&#x2F;p&gt;
&lt;p&gt;For example, the argument to &lt;code&gt;Array.prototype.map&lt;&#x2F;code&gt; needs to be a function which performs an operation on a single item in the array (and maybe also the index) and hands back the result of that operation. Similarly, the &lt;code&gt;button&lt;&#x2F;code&gt; argument to our &lt;code&gt;x-modal&lt;&#x2F;code&gt; needs to accept a &lt;code&gt;buttonClass&lt;&#x2F;code&gt; component so that the modal can apply some styling to it. The same thing holds for the component being yielded back out: it has an &lt;abbr&gt;API&lt;&#x2F;abbr&gt; you should use to invoke it, just like any other.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;All of this gets at something really important: you can think of components as just being &lt;em&gt;pure functions&lt;&#x2F;em&gt;: they take some input in the form of arguments, and give you the output of what they &lt;em&gt;render&lt;&#x2F;em&gt; and what they &lt;em&gt;yield&lt;&#x2F;em&gt;—and they always give you the same rendered &lt;abbr&gt;HTML&lt;&#x2F;abbr&gt; and the same yielded values for the same inputs. They&#x27;re just functions!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;x-modal-section&quot;&gt;&lt;code&gt;x-modal-section&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;x-modal-section&lt;&#x2F;code&gt; component is the simplest of all of these: it has no behavior, just some styling to actually chunk up the content:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&#x27;modal-section&#x27;&amp;gt;
  {{yield}}
&amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;application-controller-and-template&quot;&gt;Application controller and template&lt;&#x2F;h3&gt;
&lt;p&gt;Now, let’s use in the context of the application template, where we can see how the pieces all fit together. First, let&#x27;s see the application controller backing it—nothing unusual here, just a simple toggle to show or hide the modal.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;import Controller from &amp;quot;@ember&#x2F;controller&amp;quot;;
import { action } from &amp;quot;@ember-decorators&#x2F;object&amp;quot;;

export default class Application extends Controller {
  constructor() {
    super(...arguments);
    this.showModal = false;
  }

  @action
  showIt() {
    this.set(&amp;quot;showModal&amp;quot;, true);
  }

  @action
  hideIt() {
    this.set(&amp;quot;showModal&amp;quot;, false);
  }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now for the interesting bit—the template where we invoke &lt;code&gt;x-modal&lt;&#x2F;code&gt; and use its higher-order-component functionality:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;{{#if showModal}}
  {{#x-modal
      button=(component &#x27;x-button&#x27;
        label=&#x27;Close modal!&#x27;
        onClick=(action &#x27;hideIt&#x27;)
      )
      as |modal|
  }}
    {{#modal.section}}
      Here is some content!
    {{&#x2F;modal.section}}

    {{#modal.section}}
      Here is some other content.
    {{&#x2F;modal.section}}

    {{#modal.section}}
      &amp;lt;p&amp;gt;The content can have its own sections, as you&#x27;d expect!&amp;lt;&#x2F;p&amp;gt;
      &amp;lt;p&amp;gt;Nothing crazy going on here. Just a normal template!&amp;lt;&#x2F;p&amp;gt;
    {{&#x2F;modal.section}}
  {{&#x2F;x-modal}}
{{&#x2F;if}}

&amp;lt;button class=&#x27;button&#x27; {{action &#x27;showIt&#x27;}}&amp;gt;Show modal&amp;lt;&#x2F;button&amp;gt;

&amp;lt;!-- some other content on the page --&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We invoke the block form of &lt;code&gt;x-modal&lt;&#x2F;code&gt; just like we would any block component, and we get back the thing it yields with &lt;code&gt;as |modal|&lt;&#x2F;code&gt;. However, one of the arguments we pass to it is a component. But &lt;code&gt;modal&lt;&#x2F;code&gt; is a &lt;code&gt;hash&lt;&#x2F;code&gt; (an object!) with a property named &lt;code&gt;section&lt;&#x2F;code&gt;, which is the &lt;code&gt;x-modal-section&lt;&#x2F;code&gt; component.&lt;&#x2F;p&gt;
&lt;p&gt;Again, you can think of this like calling a function with one function as an argument and getting another function back as its return value—that returned function being something we could call over and over again once we had it.&lt;&#x2F;p&gt;
&lt;p&gt;Here, we &amp;quot;call the function&amp;quot;—invoke the &lt;code&gt;x-modal&lt;&#x2F;code&gt; component—with &lt;code&gt;component &#x27;x-button&#x27;&lt;&#x2F;code&gt; as its argument, and the returned &lt;code&gt;modal.section&lt;&#x2F;code&gt; is a component we can invoke like a normal component.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; We could even pass it into some &lt;em&gt;other&lt;&#x2F;em&gt; component itself if we so desired.&lt;&#x2F;p&gt;
&lt;p&gt;And that&#x27;s really all there is to it!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;&amp;quot;Higher-order components&amp;quot; aren&#x27;t necessarily something you need all the time, but they&#x27;re really convenient and very powerful when you &lt;em&gt;do&lt;&#x2F;em&gt; need them. They&#x27;re also a lot less complicated than the name might seem! Components are just things you can pass around in the context of a component template—they&#x27;re the &lt;em&gt;functions&lt;&#x2F;em&gt; of Handlebars.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Splitting things into components like this does increase complexity, and in particular it can increase the mental overhead of keeping track of how the pieces fit together. However, they also let us cleanly separate different pieces of functionality from each other. Doing it this way means that our modal can be concerned about &lt;em&gt;positioning&lt;&#x2F;em&gt; a button without needing to expose an &lt;abbr&gt;API&lt;&#x2F;abbr&gt; for all of the button&#x27;s own mechanics for handling clicks and performing whatever actions necessary. That makes our modal &lt;em&gt;and&lt;&#x2F;em&gt; our button way more reusable across our application. The button can be used &lt;em&gt;wherever&lt;&#x2F;em&gt; a button is useful, and the modal doesn&#x27;t need to know or care anything about it. Likewise, the button has no need to know anything about the context where it&#x27;s being used; from the button component&#x27;s perspective, it just gets wired up to some actions as usual. The same thing goes for the modal sections: they let us abstract over how the DOM is laid out, what classes are applied to it, and so on—they chunk up the modal, but the modal itself maintains responsibility for how that chunking up happens. And the caller doesn&#x27;t even &lt;em&gt;have&lt;&#x2F;em&gt; to use that; it&#x27;s just a tool that&#x27;s available for that purpose.&lt;&#x2F;p&gt;
&lt;p&gt;To sum it all up, I&#x27;ll just reiterate my earlier description: components are just like pure functions: the same inputs give you the same outputs—and, just like functions, those inputs and outputs can be other functions, that is, other components.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;If you want a good way to document the things a component &lt;code&gt;yield&lt;&#x2F;code&gt;s, check out &lt;a href=&quot;https:&#x2F;&#x2F;ember-learn.github.io&#x2F;ember-cli-addon-docs&#x2F;latest&#x2F;docs&#x2F;api&#x2F;components&#x2F;docs-demo&quot;&gt;ember-cli-addon-docs&lt;&#x2F;a&gt;, which can read an &lt;code&gt;@yield&lt;&#x2F;code&gt; JSDoc annotation.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;And it could just as well be a component; the top-level controller template is just where we put our main app functionality.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;We could also simplify this since we&#x27;re only returning one component, and if we had the full Glimmer component story, this could look &lt;em&gt;very&lt;&#x2F;em&gt; nice:&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;pre&gt;&lt;code&gt;&#96;&#96;&#96;hbs
&amp;lt;Modal @button={{component &#x27;Button&#x27;}} as |Section|&amp;gt;
  &amp;lt;Section&amp;gt;
    Some content!
  &amp;lt;&#x2F;Section&amp;gt;
  &amp;lt;Section&amp;gt;
    Some more content!
  &amp;lt;&#x2F;Section&amp;gt;

  &amp;lt;Section&amp;gt;
    &amp;lt;p&amp;gt;The content can have its own sections, as you&#x27;d expect!&amp;lt;&#x2F;p&amp;gt;
    &amp;lt;p&amp;gt;Nothing crazy going on here. Just a normal template!&amp;lt;&#x2F;p&amp;gt;
  &amp;lt;&#x2F;Section&amp;gt;
&amp;lt;&#x2F;Modal&amp;gt;
&#96;&#96;&#96;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;If you&#x27;re inclined to &amp;quot;well actually&amp;quot; me about &lt;em&gt;helpers&lt;&#x2F;em&gt; being the real functions of Handlebars templates: in the Glimmer &lt;abbr&gt;VM&lt;&#x2F;abbr&gt; world, helpers are just a kind of component.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</description>
            </item>
        
            <item>
                <title>A Meander</title>
                <pubDate>Fri, 09 Feb 2018 07:00:00 -0700</pubDate>
                <link>v4.chriskrycho.com/a-meander/</link>
                <guid>v4.chriskrycho.com/a-meander/</guid>
                <description>&lt;p&gt;This is a meander. I have a bunch of mostly-unformed thoughts, and I want to write, and the two come out here, together, in the next few minutes before I start my workday proper (because I stayed up late last night working on open source software and got up late accordingly, and so have a great deal less of &lt;a href=&quot;http:&#x2F;&#x2F;www.chriskrycho.com&#x2F;2017&#x2F;knowing-your-rhythms.html&quot; title=&quot;“Knowing Your Rhythms”&quot;&gt;my normally-allocated writing time&lt;&#x2F;a&gt; available today).&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;1&quot;&gt;1.&lt;&#x2F;h2&gt;
&lt;p&gt;Open-source software is a very strange place, and the dynamics of it favor those of us who already have well-paying jobs and lots of flexibility in our schedule.&lt;&#x2F;p&gt;
&lt;p&gt;This isn’t &lt;em&gt;necessarily&lt;&#x2F;em&gt; a bad thing. It means that anyone who wants to use open-source contribution as a gauge of someone’s fitness to work is making a pretty foolish decision, though: they’re inherently cutting off a whole sector---dare I say it, a whole &lt;em&gt;class&lt;&#x2F;em&gt;---of people who simply do not (and, barring being given a pretty surprising break, will never) have that kind of stability and flexibility.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2&quot;&gt;2.&lt;&#x2F;h2&gt;
&lt;p&gt;Twitter is really, &lt;em&gt;really&lt;&#x2F;em&gt; bad for meaningful discussion. I follow both &lt;a href=&quot;https:&#x2F;&#x2F;mobile.twitter.com&#x2F;noahpinion&quot;&gt;Noah Smith (@noahpinion)&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;mobile.twitter.com&#x2F;lymanstoneky&quot;&gt;Lyman Stone (@lymanstoneky)&lt;&#x2F;a&gt;, and they’re both extremely interesting follows, and they’re both clearly &lt;em&gt;really&lt;&#x2F;em&gt; smart and &lt;em&gt;really&lt;&#x2F;em&gt; well-informed, and in their off-Twitter writing they both do a good job of fairly representing others’ views and interacting with them.&lt;&#x2F;p&gt;
&lt;p&gt;On Twitter, their arguments are a disaster.&lt;&#x2F;p&gt;
&lt;p&gt;This is not specific to Smith and Stone. This is Twitter in one pair of interlocutors.&lt;&#x2F;p&gt;
&lt;p&gt;Seriously: stop tweeting and start blogging again, if you have an &lt;em&gt;argument&lt;&#x2F;em&gt; to make rather than just a pithy, one-off observation or a link to share.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3&quot;&gt;3.&lt;&#x2F;h2&gt;
&lt;p&gt;You can get a surprising amount of writing done in 5 minutes, if you’re willing to just word-vomit. (This whole post, start to finish, took me 12 minutes.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4&quot;&gt;4.&lt;&#x2F;h2&gt;
&lt;p&gt;I need to read more poetry; more rich, good fiction; more rich, good nonfiction. I’ve read a lot of nonfiction in the last five years, but I wouldn’t call most of it &lt;em&gt;rich&lt;&#x2F;em&gt;. Most of it---most of my seminary reading, that is---was &lt;em&gt;just okay&lt;&#x2F;em&gt;; very little of it engaged deeply with thought critical of its own perspective. (Major exceptions: David Koyzis’ really excellent &lt;em&gt;Political Visions and Illusions&lt;&#x2F;em&gt;, Alvin Plantinga’s &lt;em&gt;Where the Conflict Really Lies&lt;&#x2F;em&gt;, and of course St. Athanasius’ &lt;em&gt;On the Incarnation&lt;&#x2F;em&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;But I find that my own writing is far sharper, clearer, and better when I’m drawing &lt;em&gt;widely&lt;&#x2F;em&gt; and from &lt;em&gt;deep wells&lt;&#x2F;em&gt;. Widely, because I find that too much time in the same spot overly narrows my focus, whether that is apologetics or programming languages. From deep wells because, frankly, there is too much out there which warrants nothing more than a skim &lt;em&gt;at most&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;And that is all!&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title></title>
                <pubDate>Sat, 08 Jul 2017 21:45:00 -0700</pubDate>
                <link>v4.chriskrycho.com/book-list/</link>
                <guid>v4.chriskrycho.com/book-list/</guid>
                <description>&lt;p&gt;I&#x27;ve just posted my in-progress &lt;a href=&quot;http:&#x2F;&#x2F;www.chriskrycho.com&#x2F;2017-book-list.html&quot;&gt;2017 Book List&lt;&#x2F;a&gt;. I&#x27;ll update it with books as I finish them, and I&#x27;ll also update it with reviews (even of the &amp;quot;here&#x27;s a brief comment&amp;quot; variety) as I do them. This is something I&#x27;ve been thinking about doing for my own sake for a while, and bumping into &lt;a href=&quot;http:&#x2F;&#x2F;tbrown.org&#x2F;notes&#x2F;2017&#x2F;06&#x2F;23&#x2F;reading-and-sharing&#x2F;&quot;&gt;this post by Tim Brown&lt;&#x2F;a&gt; reminded me how much I want to be sharing what I read with other people.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes I get myself spun up on thinking that I need to be reviewing books with the best of them. In reality, I really just want to do like Tim says in that post (emphasis his):&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When I am reading and sharing ideas about what I have read, I feel like my best self. &lt;em&gt;I want more of that feeling.&lt;&#x2F;em&gt;... I’m wondering if acknowledging what I read, along with a substantial visual (a book cover image?) and any highlights or notes, could feel just as good as having a physical book.... Maybe I could list my piles of books here on my website, and link them to blog post entries with highlights&#x2F;notes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;That&#x27;s it exactly. So I&#x27;m going ahead and doing the work: I&#x27;m going to keep that list up to date, and I&#x27;m going to try to write and share &lt;em&gt;something&lt;&#x2F;em&gt; about every book I read for the rest of the year. It doesn&#x27;t have to be a lot---just a sentence or two will do in many cases. &amp;quot;I liked it&amp;quot; or &amp;quot;This had a lot of potential but didn&#x27;t quite measure up to it.&amp;quot; Something simple like &lt;a href=&quot;https:&#x2F;&#x2F;wynnnetherland.com&#x2F;reviews&#x2F;to-hell-and-back-europe-1914-1949&#x2F;&quot;&gt;what Wynn Netherland does&lt;&#x2F;a&gt;, or something long and careful when it makes good sense.&lt;&#x2F;p&gt;
&lt;p&gt;Maybe someday I&#x27;ll be able to write one of those killer reviews that ends up changing a whole conversation, or maybe I&#x27;ll just have a bunch of interesting notes I can look back on later and be able to see what I thought about a book when I&#x27;m curious a decade later. Either way, I think it&#x27;ll be a nice win.&lt;&#x2F;p&gt;
&lt;p&gt;So: &lt;a href=&quot;http:&#x2F;&#x2F;www.chriskrycho.com&#x2F;2017-book-list.html&quot;&gt;book list&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>YOLO is a thing people say</title>
                <pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate>
                <link>v4.chriskrycho.com/2017/yolo/</link>
                <guid>v4.chriskrycho.com/2017/yolo/</guid>
                <description>&lt;p&gt;But why they say it, I know not!&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>
