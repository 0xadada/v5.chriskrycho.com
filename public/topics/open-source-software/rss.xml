<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>ChrisÂ Krycho</title>
        <link>v4.chriskrycho.com</link>
        <description>Seeking truth &amp; pursuing excellence.</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="v4.chriskrycho.com/topics/open-source-software/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Sat, 27 Oct 2018 17:00:00 -0700</lastBuildDate>
        
            <item>
                <title>True Myth 2.2</title>
                <pubDate>Sat, 27 Oct 2018 17:00:00 -0700</pubDate>
                <link>v4.chriskrycho.com/true-myth-22/</link>
                <guid>v4.chriskrycho.com/true-myth-22/</guid>
                <description>&lt;p&gt;I just released v2.2&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; of True Myth, with two new pairs of helpers to deal with &lt;a href=&quot;v4.chriskrycho.com&#x2F;true-myth-22&#x2F;#safe-java-script-object-property-lookup&quot;&gt;safe JavaScript object property lookup with &lt;code&gt;Maybe&lt;&#x2F;code&gt;s&lt;&#x2F;a&gt; and &lt;a href=&quot;v4.chriskrycho.com&#x2F;true-myth-22&#x2F;#handling-exception-throwing-functions&quot;&gt;handling exception-throwing code with &lt;code&gt;Result&lt;&#x2F;code&gt;s&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;safe-javascript-object-property-lookup&quot;&gt;Safe JavaScript object property lookup&lt;&#x2F;h2&gt;
&lt;p&gt;We often deal with &lt;em&gt;optional properties&lt;&#x2F;em&gt; on JavaScript objects, and by default JavaScript just gives us &lt;code&gt;undefined&lt;&#x2F;code&gt; if a property doesn&#x27;t exist on an object and we look it up:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;type Person = {
  name?: string;
};

let me: Person = { name: &#x27;Chris&#x27; };
console.log(me.name); &#x2F;&#x2F; Chris

let anonymous: Person = {};
console.log(anonymous.name); &#x2F;&#x2F; undefined
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can already work around that with &lt;code&gt;Maybe.of&lt;&#x2F;code&gt;, of course:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;function printName(p: Person) {
  let name = Maybe.of(p.name);
  console.log(name.unwrapOr(&#x27;&amp;lt;anonymous&amp;gt;&#x27;));
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But this is a &lt;em&gt;really&lt;&#x2F;em&gt; common pattern! &lt;code&gt;Maybe.property&lt;&#x2F;code&gt; is a convenience method for dealing with this:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;function printName(p: Person) {
  let name = Maybe.property(&#x27;name&#x27;, p);
  console.log(name.unwrapOr(&#x27;&amp;lt;anonymous&amp;gt;&#x27;));
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At first blush, this might be a head-scratcher: after all, it&#x27;s actually slightly &lt;em&gt;longer&lt;&#x2F;em&gt; than doing it with &lt;code&gt;Maybe.of&lt;&#x2F;code&gt;. However, it ends up showing its convenience when you&#x27;re using the curried form in a functional pipeline. For example, if we had a &lt;em&gt;list&lt;&#x2F;em&gt; of people, and wanted to get a list of just the people&#x27;s names (ignoring anonymous people), we might do this:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;function justNames(people: Person[]): string[] {
  return people
    .map(Maybe.property(&#x27;name&#x27;))
    .filter(Maybe.isJust)
    .map(Just.unwrap);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another common scenario is dealing with the same kind of lookup, but in the context of a &lt;code&gt;Maybe&lt;&#x2F;code&gt; of an object. Prior to 2.2.0, we could do this with a combination of &lt;code&gt;Maybe.of&lt;&#x2F;code&gt; and &lt;code&gt;andThen&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;function getName(maybePerson: Maybe&amp;lt;Person&amp;gt;): string {
  return maybePerson.andThen(p =&amp;gt; Maybe.of(p.name));
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is harder to compose than we might like, and we &lt;em&gt;can&#x27;t&lt;&#x2F;em&gt; really write it in a &amp;quot;point free&amp;quot; style, even if that&#x27;s more convenient. We also end up repeating the &lt;code&gt;andThen&lt;&#x2F;code&gt; invocation every time we go down a layer if we have a more deeply nested object than this. Accordingly, 2.2.0 also adds another convenience method for dealing with deeply nested lookups on objects in a type-safe way: &lt;code&gt;Maybe.get&lt;&#x2F;code&gt; (and the corresponding instance methods).&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&#x2F;&#x2F; Function version:
function getNameFn(maybePerson: Maybe&amp;lt;Person&amp;gt;): string {
  return Maybe.get(&#x27;name&#x27;, maybePerson);
}

&#x2F;&#x2F; Method version
function getNameM(maybePerson: Maybe&amp;lt;Person&amp;gt;): string {
  return maybePerson.get(&#x27;name&#x27;);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, since the function version is curried, we can use this to create other little helper functions along the way:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;const getName = Maybe.get(&#x27;name&#x27;);

function getAllNames(people: Maybe&amp;lt;Person&amp;gt;[]): string[] {
  return people
    .map(getName)
    .filter(Maybe.isJust)
    .map(Just.unwrap);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And if our object is a deeper type:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;type ComplicatedPerson = {
  name?: {
    first?: string;
    last?: string;
  };
};

let none: Maybe&amp;lt;ComplicatedPerson&amp;gt; = Maybe.nothing();
console.log(none.get(&#x27;name&#x27;).toString());
&#x2F;&#x2F; Nothing
console.log(none.get(&#x27;name&#x27;).get(&#x27;first&#x27;).toString());
&#x2F;&#x2F; Nothing

let nameless: Maybe&amp;lt;ComplicatedPerson&amp;gt; = Maybe.just({});
console.log(nameless.get(&#x27;name&#x27;).toString());
&#x2F;&#x2F; Just([object Object]);
console.log(nameless.get(&#x27;name&#x27;).get(&#x27;first&#x27;).toString());
&#x2F;&#x2F; Nothing

let firstOnly: Maybe&amp;lt;ComplicatedPerson&amp;gt; = Maybe.just({
  name: {
    first: &#x27;Chris&#x27;,
  },
});
console.log(firstOnly.get(&#x27;name&#x27;).toString());
&#x2F;&#x2F; Just([object Object]);
console.log(firstOnly.get(&#x27;name&#x27;).get(&#x27;first&#x27;).toString());
&#x2F;&#x2F; Just(Chris);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that in these cases, since the type we&#x27;re dealing with is some kind of object with specific keys, if you try to pass in a key which doesn&#x27;t existing on the relevant object type, you&#x27;ll get a type error. (Or, if you&#x27;re using the curried version, if you try to pass an object which doesn&#x27;t have that key, you&#x27;ll get a type error.) However, we also often use JavaScript objects as &lt;em&gt;dictionaries&lt;&#x2F;em&gt;, mapping from a key to a value (most often, but not always, a &lt;em&gt;string&lt;&#x2F;em&gt; key to a specific value type). &lt;code&gt;Maybe.property&lt;&#x2F;code&gt; and &lt;code&gt;Maybe.get&lt;&#x2F;code&gt; both work with dictionary types as well.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;type Dict&amp;lt;T&amp;gt; = { [key: string]: T };

let ages: Dict&amp;lt;number&amp;gt; = {
  &#x27;chris&#x27;: 31,
};

console.log(Maybe.property(&#x27;chris&#x27;, ages)); &#x2F;&#x2F; Just(31)
console.log(Maybe.property(&#x27;joe&#x27;, ages)); &#x2F;&#x2F; Nothing

let maybeAges: Maybe&amp;lt;Dict&amp;lt;number&amp;gt;&amp;gt; = Maybe.of(ages);
console.log(ages.get(&#x27;chris&#x27;)); &#x2F;&#x2F; Just(31)
console.log(ages.get(&#x27;joe&#x27;)); &#x2F;&#x2F; Nothing
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hopefully you&#x27;ll find these helpful! I ran into the motivating concerns for them pretty regularly in the codebase I work with each day, so I&#x27;m looking forward to integrating them into that app!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;handling-exception-throwing-functions&quot;&gt;Handling exception-throwing functions&lt;&#x2F;h2&gt;
&lt;p&gt;The other big additions are the &lt;code&gt;Result.tryOr&lt;&#x2F;code&gt; and &lt;code&gt;Result.tryOrElse&lt;&#x2F;code&gt; functions. Both of these help us deal with functions which throw exceptions. Since JavaScript doesn&#x27;t have any &lt;em&gt;native&lt;&#x2F;em&gt; construct like &lt;code&gt;Result&lt;&#x2F;code&gt;, idiomatic JavaScript &lt;em&gt;does&lt;&#x2F;em&gt; often throw exceptions. And that can be frustrating you want to have a value type like a &lt;code&gt;Result&lt;&#x2F;code&gt; to deal with instead.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes, you don&#x27;t care &lt;em&gt;what&lt;&#x2F;em&gt; the exception was; you just want a default value (or a value constructed from the local state of your program, but either way just one value) you can use as the error to keep moving along through your program. In that case, you wrap a function which throws an error in &lt;code&gt;Result.tryOr&lt;&#x2F;code&gt;. Let&#x27;s assume we have a function either returns a number of throws an error, which we&#x27;ll just call &lt;code&gt;badFunction&lt;&#x2F;code&gt; because the details here don&#x27;t really matter.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;const err = &#x27;whoops! something went wrong!&#x27;;
const result = Result.tryOr(err, badFunction());
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;result&lt;&#x2F;code&gt; value has the type &lt;code&gt;Result&amp;lt;number, string&amp;gt;&lt;&#x2F;code&gt;. If &lt;code&gt;badFunction&lt;&#x2F;code&gt; through an error, we have an &lt;code&gt;Err&lt;&#x2F;code&gt; with the value &lt;code&gt;&#x27;whoops! something went wrong!&#x27;&lt;&#x2F;code&gt; in it. If it &lt;em&gt;didn&#x27;t&lt;&#x2F;em&gt; throw an error, we have an &lt;code&gt;Ok&lt;&#x2F;code&gt; with the number returned from &lt;code&gt;badFunction&lt;&#x2F;code&gt; in it. Handy!&lt;&#x2F;p&gt;
&lt;p&gt;Of course, we often want to &lt;em&gt;do something&lt;&#x2F;em&gt; with the exception that gets thrown. For example, we might want to log an error to a bug-tracking service, or display a nice message to the user, or any number of other things. In that case, we can use the &lt;code&gt;Result.tryOrElse&lt;&#x2F;code&gt; function. Let&#x27;s imagine we have a function &lt;code&gt;throwsHelpfulErrors&lt;&#x2F;code&gt; which returns a &lt;code&gt;number&lt;&#x2F;code&gt; or does just what it says on the tin: it throws a bunch of different kinds of errors, which are helpfully distinct and carry around useful information with them. Note that the type of the error-handling callback we pass in is &lt;code&gt;(error: unknown) =&amp;gt; E&lt;&#x2F;code&gt;, because JS functions can throw &lt;em&gt;anything&lt;&#x2F;em&gt; as their error.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;const handleErr = (e: unknown): string =&amp;gt; {
  if (e instanceof Error) {
    return e.message;
  } else if (typeof e === &#x27;string&#x27;) {
    return e;
  } else if (typeof e === &#x27;number&#x27;) {
    return &#96;Status code: ${e}&#96;;
  } else {
    return &#x27;Unknown error&#x27;;
  }
}

const result = Result.tryOrElse(handleErr, throwsHelpfulErrors);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code&gt;result&lt;&#x2F;code&gt; is once again a &lt;code&gt;Result&amp;lt;number, string&amp;gt;&lt;&#x2F;code&gt;, but the error side has whatever explanatory information the exception provided to us, plus some massaging we did ourselves. This is particularly handy for converting exceptions to &lt;code&gt;Result&lt;&#x2F;code&gt;s when you have a library which uses exceptions extensively, but in a carefully structured way. (You could, in fact, just use an identity function to return whatever error the library throwsâas long as you write your types carefully and accurately as a union of those error types for the &lt;code&gt;E&lt;&#x2F;code&gt; type parameter! However, doing that would require you to explicitly opt into the use of &lt;code&gt;any&lt;&#x2F;code&gt; to write it as a simple identity function, so I&#x27;m not sure I&#x27;d &lt;em&gt;recommend&lt;&#x2F;em&gt; it. If you go down that path, do it with care.)&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;And that&#x27;s it for True Myth 2.2! Enjoy, and of course please &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;true-myth&#x2F;true-myth&#x2F;issues&quot;&gt;open an issue&lt;&#x2F;a&gt; if you run into any bugs!&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bmakuh&quot;&gt;Ben Makuh&lt;&#x2F;a&gt; for implementing &lt;code&gt;Result.tryOr&lt;&#x2F;code&gt; and &lt;code&gt;Result.tryOrElse&lt;&#x2F;code&gt;. Thanks to Ben and also &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tansongyang&quot;&gt;Frank Tan&lt;&#x2F;a&gt; for helpful input on the &lt;code&gt;Maybe.get&lt;&#x2F;code&gt; and &lt;code&gt;Maybe.property&lt;&#x2F;code&gt; &lt;abbr&gt;API&lt;&#x2F;abbr&gt; design!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;I published both &lt;code&gt;2.2.0&lt;&#x2F;code&gt; and &lt;code&gt;2.2.1&lt;&#x2F;code&gt;, because once again I missed something along the way. This time it was making sure all the new functions were optionally curried to support partial application.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</description>
            </item>
        
            <item>
                <title>A Meander</title>
                <pubDate>Fri, 09 Feb 2018 07:00:00 -0700</pubDate>
                <link>v4.chriskrycho.com/a-meander/</link>
                <guid>v4.chriskrycho.com/a-meander/</guid>
                <description>&lt;p&gt;This is a meander. I have a bunch of mostly-unformed thoughts, and I want to write, and the two come out here, together, in the next few minutes before I start my workday proper (because I stayed up late last night working on open source software and got up late accordingly, and so have a great deal less of &lt;a href=&quot;http:&#x2F;&#x2F;www.chriskrycho.com&#x2F;2017&#x2F;knowing-your-rhythms.html&quot; title=&quot;âKnowing Your Rhythmsâ&quot;&gt;my normally-allocated writing time&lt;&#x2F;a&gt; available today).&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;1&quot;&gt;1.&lt;&#x2F;h2&gt;
&lt;p&gt;Open-source software is a very strange place, and the dynamics of it favor those of us who already have well-paying jobs and lots of flexibility in our schedule.&lt;&#x2F;p&gt;
&lt;p&gt;This isnât &lt;em&gt;necessarily&lt;&#x2F;em&gt; a bad thing. It means that anyone who wants to use open-source contribution as a gauge of someoneâs fitness to work is making a pretty foolish decision, though: theyâre inherently cutting off a whole sector---dare I say it, a whole &lt;em&gt;class&lt;&#x2F;em&gt;---of people who simply do not (and, barring being given a pretty surprising break, will never) have that kind of stability and flexibility.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2&quot;&gt;2.&lt;&#x2F;h2&gt;
&lt;p&gt;Twitter is really, &lt;em&gt;really&lt;&#x2F;em&gt; bad for meaningful discussion. I follow both &lt;a href=&quot;https:&#x2F;&#x2F;mobile.twitter.com&#x2F;noahpinion&quot;&gt;Noah Smith (@noahpinion)&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;mobile.twitter.com&#x2F;lymanstoneky&quot;&gt;Lyman Stone (@lymanstoneky)&lt;&#x2F;a&gt;, and theyâre both extremely interesting follows, and theyâre both clearly &lt;em&gt;really&lt;&#x2F;em&gt; smart and &lt;em&gt;really&lt;&#x2F;em&gt; well-informed, and in their off-Twitter writing they both do a good job of fairly representing othersâ views and interacting with them.&lt;&#x2F;p&gt;
&lt;p&gt;On Twitter, their arguments are a disaster.&lt;&#x2F;p&gt;
&lt;p&gt;This is not specific to Smith and Stone. This is Twitter in one pair of interlocutors.&lt;&#x2F;p&gt;
&lt;p&gt;Seriously: stop tweeting and start blogging again, if you have an &lt;em&gt;argument&lt;&#x2F;em&gt; to make rather than just a pithy, one-off observation or a link to share.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3&quot;&gt;3.&lt;&#x2F;h2&gt;
&lt;p&gt;You can get a surprising amount of writing done in 5 minutes, if youâre willing to just word-vomit. (This whole post, start to finish, took me 12 minutes.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4&quot;&gt;4.&lt;&#x2F;h2&gt;
&lt;p&gt;I need to read more poetry; more rich, good fiction; more rich, good nonfiction. Iâve read a lot of nonfiction in the last five years, but I wouldnât call most of it &lt;em&gt;rich&lt;&#x2F;em&gt;. Most of it---most of my seminary reading, that is---was &lt;em&gt;just okay&lt;&#x2F;em&gt;; very little of it engaged deeply with thought critical of its own perspective. (Major exceptions: David Koyzisâ really excellent &lt;em&gt;Political Visions and Illusions&lt;&#x2F;em&gt;, Alvin Plantingaâs &lt;em&gt;Where the Conflict Really Lies&lt;&#x2F;em&gt;, and of course St. Athanasiusâ &lt;em&gt;On the Incarnation&lt;&#x2F;em&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;But I find that my own writing is far sharper, clearer, and better when Iâm drawing &lt;em&gt;widely&lt;&#x2F;em&gt; and from &lt;em&gt;deep wells&lt;&#x2F;em&gt;. Widely, because I find that too much time in the same spot overly narrows my focus, whether that is apologetics or programming languages. From deep wells because, frankly, there is too much out there which warrants nothing more than a skim &lt;em&gt;at most&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;And that is all!&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>
